1|||||

ippStaticInit
----------------------------------------------

2||||1|just testing...

ippiResizeSqrPixel_8u_C1R
----------------------------------------------

3|||||I have provided more details to development team already.

ippStaticInit
ippsLowercaseLatin_8u_I
ippsUppercaseLatin_8u_I
ippsTrimC_8u_I
ippsECCPGetOrderBitSize
ippsECCPGet
ippsRandUniform_Direct_16s
ippsRandUniform_Direct_32f
ippsRandUniform_Direct_64f
----------------------------------------------

4||||1|

ippsRandGauss_Direct_32f
ippsFFTFwd_RToCCS_32f_I
ippsFFTInv_CCSToR_32f_I
ippsFFTInitAlloc_R_32f
ippsFFTFree_R_32f
ippsFlip_32f_I
ippsMulC_32f_I
ippsMul_32f_I
ippsAdd_32f_I
----------------------------------------------

5||||1|Is there any replacement for the deinterlacer routines?  We use these quite heavily so losing them would be a problem for us.

ippiDeinterlaceFilterCAVT_8u_C1R
ippStaticInit
ippiDCTFwdInitAlloc_32f
ippiDCTFwdFree_32f
ippiLShiftC_16u_C1IR
ippiRShiftC_16u_C1IR
ippiDeinterlaceBlendInitAlloc_8u_C1
ippiDeinterlaceBlendFree_8u_C1
ippiDeinterlaceMotionAdaptive_8u_C1
ippiPyrDownGetBufSize_Gauss5x5
ippiPyrDown_Gauss5x5_8u_C1R
ippiPyrDown_Gauss5x5_8u_C3R
ippiMulC_8u_C1IRSfs
ippiMirror_8u_C1IR
ippiMirror_16u_C1IR
ippiMirror_8u_C3IR
ippiMirror_8u_C4IR
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
----------------------------------------------

6|||||

ippiDeinterlaceMotionAdaptive_8u_C1
----------------------------------------------

7||||1|

ippsRandUniform_Direct_16s
ippsRandUniform_Direct_32f
ippsRandUniform_Direct_64f
ippsNot_32u_I
----------------------------------------------

8|||||Not a nice experience seeing so many deprecations of functions I use. Seems like any function I use is deprecated now.

ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_16s_C1R
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_64f_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_16s_C3R
ippiResizeSqrPixel_32f_C3R
ippiResizeSqrPixel_64f_C3R
ippiNot_8u_C1IR
ippiNot_8u_C3IR
ippiComplement_32s_C1IR
ippiAbs_16s_C1IR
ippiAbs_16s_C3IR
ippiAddC_8u_C1IRSfs
ippiAddC_16u_C1IRSfs
ippiAddC_16s_C1IRSfs
ippiAddC_32f_C1IR
ippiAddC_8u_C3IRSfs
ippiAddC_16u_C3IRSfs
ippiAddC_16s_C3IRSfs
ippiAddC_32f_C3IR
ippiSubC_8u_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiSubC_16s_C1IRSfs
ippiSubC_32f_C1IR
ippiSubC_8u_C3IRSfs
ippiSubC_16u_C3IRSfs
ippiSubC_16s_C3IRSfs
ippiSubC_32f_C3IR
----------------------------------------------

9|||||Not a nice experience seeing so many deprecations of functions I use. Seems like any function I use is deprecated now.

ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_16s_C1R
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_64f_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_16s_C3R
ippiResizeSqrPixel_32f_C3R
ippiResizeSqrPixel_64f_C3R
ippiNot_8u_C1IR
ippiNot_8u_C3IR
ippiComplement_32s_C1IR
ippiAbs_16s_C1IR
ippiAbs_16s_C3IR
ippiAddC_8u_C1IRSfs
ippiAddC_16u_C1IRSfs
ippiAddC_16s_C1IRSfs
ippiAddC_32f_C1IR
ippiAddC_8u_C3IRSfs
ippiAddC_16u_C3IRSfs
ippiAddC_16s_C3IRSfs
ippiAddC_32f_C3IR
ippiSubC_8u_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiSubC_16s_C1IRSfs
ippiSubC_32f_C1IR
ippiSubC_8u_C3IRSfs
ippiSubC_16u_C3IRSfs
ippiSubC_16s_C3IRSfs
ippiSubC_32f_C3IR
ippiAbs_32f_C1IR
ippiAbs_32f_C3IR
----------------------------------------------

10||||1|

ippiDCTFwdFree_32f
ippiDCTFwdInitAlloc_32f
ippiDCTInvFree_32f
ippiDCTInvInitAlloc_32f
ippiDFTFree_C_32fc
ippiDFTFree_R_32f
ippiDFTFwd_CToC_32fc_C1IR
ippiDFTFwd_RToPack_32f_C1IR
ippiDFTInitAlloc_C_32fc
ippiDFTInitAlloc_R_32f
ippiDFTInv_CToC_32fc_C1IR
ippiDFTInv_PackToR_32f_C1IR
ippiMulPack_32f_C1IR
ippiMulPackConj_32f_C1IR
ippsAbs_32f_I
ippsAdd_32f_I
ippsAdd_32fc_I
ippsAdd_32s_ISfs
ippsAdd_64f_I
ippsAddC_32f_I
ippsAddC_32fc_I
ippsAddC_32s_ISfs
ippsAddC_64f_I
ippsDCTFwd_32f_I
ippsDCTFwdFree_32f
ippsDCTInv_32f_I
ippsDCTInvFree_32f
ippsDFTFree_C_32fc
ippsDiv_32f_I
ippsDiv_32fc_I
ippsDiv_64f_I
ippsDivCRev_32f_I
ippsFlip_32f_I
ippsFlip_32fc_I
ippsLn_64f32f
ippsMaxEvery_32f_I
ippsMinEvery_32f_I
ippsMul_32f_I
ippsMul_32f32fc_I
ippsMul_32fc_I
ippsMulC_32f_I
ippsMulC_32fc_I
ippsMulC_32s_ISfs
ippsMulC_64f_I
ippsSqr_32f_I
ippsSqr_64f_I
ippsSqrt_32f_I
ippsSqrt_32fc_I
ippsSqrt_64f_I
ippsSub_32f_I
ippsSub_32fc_I
ippsSub_64f_I
ippsSubCRev_32f_I
ippsSubCRev_32fc_I
ippsSubCRev_8u_ISfs
ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippStaticInit
ippsThreshold_GT_32f_I
ippsThreshold_GT_32s_I
ippsThreshold_LT_32f_I
ippsThreshold_LT_32s_I
ippsThreshold_LTVal_32f_I
ippsThreshold_LTVal_32fc_I
ippsThreshold_LTValGTVal_32f_I
----------------------------------------------

11|||||

ippiAddC_32f_C1IR
ippiAdd_32f_C1IR
ippiAnd_8u_C1IR
ippiAndC_16u_C1IR
ippiCrossCorrValid_Norm_32f_C1R
ippiDeinterlaceFilterCAVT_8u_C1R
ippiDilate3x3_8u_C1IR
ippiErode3x3_8u_C1IR
ippiMedian_8u_P3C1R
ippiMirror_8u_C1IR
ippiMirror_8u_C3IR
ippiMulC_32f_C1IR
ippiResizeYUV422_8u_C2R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C4R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_16u_C1R
ippiSub_32f_C1IR
ippiSwapChannels_8u_C3IR
ippiOpticalFlowPyrLKFree_8u_C1R
ippiOpticalFlowPyrLKInitAlloc_8u_C1R
ippiPyramidFree
ippiPyramidInitAlloc
ippiPyramidLayerDownFree_8u_C1R
ippiPyramidLayerDownInitAlloc_8u_C1R
ippiBGR555ToYCbCr422_16u8u_C3C2R
ippiBGR555ToYCrCb420_16u8u_C3P3R
ippiBGR565ToYCbCr422_16u8u_C3C2R
ippiBGR565ToYCrCb420_16u8u_C3P3R
ippiYCbCr420ToBGR444_8u16u_P3C3R
ippiYCbCr420ToBGR555_8u16u_P3C3R
ippiYCbCr420ToBGR565_8u16u_P3C3R
ippiYCbCr422ToBGR444_8u16u_C2C3R
ippiYCbCr422ToBGR555_8u16u_C2C3R
ippiYCbCr422ToBGR565_8u16u_C2C3R
ippiHuffmanTableFree_32s
ippiReconstructChromaInter4x4_H264High_32s16u_IP2R
ippiReconstructChromaInterMB_H264_16s8u_P2R
ippiReconstructChromaIntra4x4MB_H264_16s8u_P2R
ippiReconstructChromaIntraMB_H264_16s8u_P2R
ippiSAT8x8D_16u32s_C1R
ippsLShiftC_16s_I
ippsRShiftC_16s_I
ippiZigzagInv8x8_16s_C1
----------------------------------------------

12||||1|***PLEASE do not remove the Cross Correlation functions (esp. for _32f_C1R and _64f_C1R).  These are extremely useful and very well performing.***

ippiAddC_32f_C1IR
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_64f_C1R
ippiDFTFree_R_32f
ippiDFTInitAlloc_R_32f
ippiDivC_32f_C1IR
ippiExp_32f_C1IR
ippiMulC_32f_C1IR
ippiSubC_32f_C1IR
ippiThreshold_LTValGTVal_32f_C1IR
ippsDivC_32f_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsThreshold_LTValGTVal_32f_I
ippsThreshold_LTValGTVal_64f_I
----------------------------------------------

13|||||if we are to manage the memory, then maybe I can work around these deprecated functions.

ippiMorphologyInitAlloc_32f_C1R
ippiMorphologyInitAlloc_8u_C1R
----------------------------------------------

14|||||we use this function a lot

ippiCrossCorrValid_NormLevel_64f_C1R
----------------------------------------------

15|||||

ippsLShiftC_16s_I
----------------------------------------------

16|||||

ippStaticInit
----------------------------------------------

17|||||

ippiResizeSqrPixel_8u_C1R
----------------------------------------------

18|||||

ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_C3R
----------------------------------------------

19||||1|Functions working in place are very useful. Why are you removing them?

ippiAdd_8u_AC4IRSfs
ippiAdd_8u_C3IRSfs
ippiAnd_8u_C1IR
ippiAnd_8u_C3IR
ippiAnd_8u_C4IR
ippiDilate_8u_C1IR
ippiErode_8u_C1IR
ippiLUT_8u_AC4IR
ippiLUT_8u_C3IR
ippiLUT_Linear_8u_AC4IR
ippiLUT_Linear_8u_C1IR
ippiLUT_Linear_8u_C3IR
ippiMulC_8u_AC4IRSfs
ippiMulC_8u_C3IRSfs
ippiNot_8u_AC4IR
ippiNot_8u_C1IR
ippiNot_8u_C3IR
ippiOr_8u_C1IR
ippiOr_8u_C3IR
ippiOr_8u_C4IR
ippiOrC_8u_C1IR
ippiOrC_8u_C4IR
ippiSub_8u_AC4IRSfs
ippiSub_8u_C3IRSfs
ippiSubC_8u_C4IRSfs
ippiSwapChannels_8u_C3IR
ippiSwapChannels_8u_C4IR
ippiThreshold_GTVal_8u_C1IR
ippiThreshold_LTVal_8u_C1IR
ippiThreshold_LTValGTVal_8u_C1IR
----------------------------------------------

20||||1|

ippiMirror_8u_C1IR
ippiResizeSqrPixel_8u_C4R
ippsAbs_32f_I
ippsAdd_32f_I
ippsAdd_64f_I
ippsAddC_16s_I
ippsAddC_32f_I
ippsAddC_32fc_I
ippsConj_32fc_I
ippsConj_64fc_I
ippsConjPerm_32fc_I
ippsConjPerm_64fc_I
ippsDFTFree_C_32fc
ippsDFTFree_C_64fc
ippsDFTFree_R_32f
ippsDiv_32f_I
ippsDivC_32f_I
ippsDivC_32fc_I
ippsDivC_64f_I
ippsFFTFree_C_32fc
ippsFFTFree_C_64fc
ippsFFTFree_R_32f
ippsFFTFree_R_64f
ippsFFTFwd_CToC_32fc_I
ippsFFTFwd_CToC_64fc_I
ippsFFTFwd_RToPerm_32f_I
ippsFFTFwd_RToPerm_64f_I
ippsFFTInitAlloc_C_32fc
ippsFFTInitAlloc_C_64fc
ippsFFTInitAlloc_R_32f
ippsFFTInitAlloc_R_64f
ippsFilterMedian_32f_I
ippsFIR_Direct_32f_I
ippsFIRFree_32fc
ippsFIRFree_64f
ippsFIRFree_64fc
ippsFIRInitAlloc_32fc
ippsFIRInitAlloc_64f
ippsFIRInitAlloc_64fc
ippsFIRMRInitAlloc_32fc
ippsFIRMRInitAlloc_64fc
ippsFIROne_64f
ippsFIROne_64fc
ippsLn_64f_I
ippsMul_32f_I
ippsMul_32f32fc_I
ippsMul_32fc_I
ippsMul_64f_I
ippsMul_64fc_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsMulC_64fc_I
ippsRandUniform_Direct_32f
ippsSqr_64f_I
ippsSqr_64fc_I
ippsSqrt_32f_I
ippsSqrt_64f_I
ippsSubC_32f_I
ippsSubC_64f_I
ippStaticInit
ippsThreshold_LT_32f_I
ippsTone_Direct_32fc
ippsTone_Direct_64fc
ippsWinBartlett_32f_I
ippsWinBartlett_32fc_I
ippsWinBartlett_64f_I
ippsWinBlackman_32f_I
ippsWinBlackman_32fc_I
ippsWinBlackmanOpt_32f_I
ippsWinBlackmanOpt_32fc_I
ippsWinBlackmanStd_32f_I
ippsWinBlackmanStd_32fc_I
ippsWinBlackmanStd_64f_I
ippsWinHamming_32f_I
ippsWinHamming_32fc_I
ippsWinHamming_64f_I
ippsWinHann_32f_I
ippsWinHann_32fc_I
ippsWinHann_64f_I
ippsWinKaiser_32f_I
ippsWinKaiser_32fc_I
----------------------------------------------

21||||1|

ippiResizeSqrPixel_8u_C1R
ippsAbs_32f_I
ippsAdd_32f_I
ippsAddC_32f_I
ippsAddC_32fc_I
ippsConj_32fc_I
ippsDFTFree_R_32f
ippsDiv_32f_I
ippsDivC_32f_I
ippsDivC_32fc_I
ippsFFTFree_C_32fc
ippsFFTFree_R_32f
ippsFFTFwd_CToC_32fc_I
ippsFFTFwd_RToCCS_32f_I
ippsFFTInitAlloc_C_32fc
ippsFFTInitAlloc_R_32f
ippsFFTInv_CCSToR_32f_I
ippsFFTInv_CToC_32fc_I
ippsFilterMedian_32f_I
ippsFIR_16s_Sfs
ippsFIRFree_16s
ippsFIRFree_32fc
ippsFIRFree_64fc
ippsFIRInitAlloc_16s
ippsFIRInitAlloc_32fc
ippsFIRInitAlloc_64fc
ippsFIRMRInitAlloc_32fc
ippsFIROne_Direct_32f
ippsFIROne_Direct_32fc_I
ippsGFGetSize_8u
ippsGFInit_8u
ippsMagSquared_32fc64f
ippsMaxEvery_16s_I
ippsMaxEvery_8u_I
ippsMul_32f_I
ippsMul_32f32fc_I
ippsMul_32fc_I
ippsMulC_32f_I
ippsMulC_32fc_I
ippsRandUniform_Direct_16s
ippsRandUniform_Direct_32f
ippsRSDecodeBM_8u
ippsRSDecodeBMGetBufferSize_8u
ippsRSDecodeEE_8u
ippsRSDecodeEEGetBufferSize_8u
ippsRSDecodeGetSize_8u
ippsRSDecodeInit_8u
ippsSqr_32fc_I
ippsSqrt_32f_I
ippsSub_16s_I
ippsSub_32fc_I
ippsSubC_32f_I
ippsSubC_32fc_I
ippStaticInit
ippsThreshold_GTAbs_32f_I
ippsThreshold_LT_32f_I
ippsTone_Direct_32fc
ippsWinBlackmanStd_32f_I
ippsXorC_8u_I
----------------------------------------------

22||||1|

ippsAdd_32f_I
ippsAddC_32f_I
ippsConj_32fc_I
ippsDivC_32f_I
ippsFFTFree_C_32fc
ippsFFTInitAlloc_C_32fc
ippsFIRFree_32fc
ippsFIRInitAlloc_32fc
ippsFIRMRInitAlloc_32fc
ippsLn_32f_I
ippsMul_32fc_I
ippsMulC_32f_I
ippsSqrt_32f_I
ippStaticInit
ippsTone_Direct_32fc
ippsWinBlackmanOpt_32fc_I
----------------------------------------------

23||||1|

ippiSub_16u_C1IRSfs
----------------------------------------------

24||||1|For the most part, it appears we can replace deprecated fns with equivalents.  Some comments:

ippsFIRInitAlloc_32f
ippsFIRFree_32f
ippsFIR_32f_I
ippsMulC_64f_I
ippsDFTFree_C_32fc
ippsFFTFree_C_64fc
ippsFFTFree_C_32fc
ippsFFTInitAlloc_C_64fc
ippsFFTInitAlloc_C_32fc
ippsFFTFwd_CToC_32fc_I
ippsFFTInv_CToC_32fc_I
ippsFFTFwd_CToC_64fc_I
ippsFFTInv_CToC_64fc_I
ippsDFTInitAlloc_R_16s
ippsDFTInitAlloc_C_16sc
ippsDFTFree_R_16s
ippsDFTFree_C_16sc
ippsDFTFree_R_32f
ippsDFTFree_R_64f
ippsDFTFree_C_64fc
ippsConjCcs_32fc_I
ippsConjCcs_64fc_I
ippsConj_32fc_I
ippsConj_64fc_I
ippsFlip_32f_I
ippsFlip_64f_I
ippsFlip_32fc_I
ippsFlip_64fc_I
ippsAbs_32f_I
ippsAbs_64f_I
ippsSqr_32f_I
ippsSqr_64f_I
ippsSqr_32fc_I
ippsSqr_64fc_I
ippsSqrt_32f_I
ippsSqrt_64f_I
ippsSqrt_32fc_I
ippsSqrt_64fc_I
ippsAddC_16s_I
ippsAddC_32s_ISfs
ippsAddC_32f_I
ippsAddC_64f_I
ippsAddC_32fc_I
ippsAddC_64fc_I
ippsAdd_16s_I
ippsAdd_32s_ISfs
ippsAdd_32f_I
ippsAdd_64f_I
ippsAdd_32fc_I
ippsAdd_64fc_I
ippsSubC_16s_I
ippsSubC_32s_ISfs
ippsSubC_32f_I
ippsSubC_64f_I
ippsSubC_32fc_I
ippsSubC_64fc_I
ippsSub_16s_I
ippsSub_32s_ISfs
ippsSub_32f_I
ippsSub_64f_I
ippsSub_32fc_I
ippsSub_64fc_I
ippsMulC_16s_I
ippsMulC_32s_ISfs
ippsMulC_32f_I
ippsMulC_32fc_I
ippsMulC_64fc_I
ippsMul_16s_I
ippsMul_32s_ISfs
ippsMul_32f_I
ippsMul_64f_I
ippsMul_32fc_I
ippsMul_64fc_I
ippsDivC_32f_I
ippsDivC_64f_I
ippsDivC_32fc_I
ippsDivC_64fc_I
ippsDiv_32f_I
ippsDiv_64f_I
ippsDiv_32fc_I
ippsDiv_64fc_I
ippsDivC_16u_ISfs
ippsRandUniform_Direct_32f
ippsRandUniform_Direct_64f
ippsRandGauss_Direct_32f
ippsRandGauss_Direct_64f
ippsTone_Direct_32f
ippsTone_Direct_64f
ippsTone_Direct_32fc
ippsTone_Direct_64fc
ippsTriangle_Direct_32f
ippsTriangle_Direct_64f
ippsWinKaiser_32f_I
ippsWinKaiser_64f_I
ippsAnd_8u_I
ippsOr_8u_I
ippsXor_8u_I
ippsNot_8u_I
ippiResizeSqrPixel_8u_C4R
----------------------------------------------

25||||1|I have not gone looking for replacements for these functions.

ippiMul_32f_C1IR
ippiAdd_8u_C1IRSfs
ippiAdd_16u_C1IRSfs
ippiRShiftC_8u_C1IR
ippiLShiftC_8u_C1IR
ippiResizeSqrPixel_8u_C1R
ippiMirror_8u_C1IR
ippiMirror_8u_C3IR
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiCrossCorrValid_Norm_8u32f_C1R
ippiSqrDistanceValid_Norm_8u32f_C1R
ippiCrossCorrValid_8u32f_C1R
ippiCrossCorrSame_NormLevel_8u32f_C1R
ippiCrossCorrFull_NormLevel_8u32f_C1R
ippiDCTFwdInitAlloc_32f
ippiDCTFwdFree_32f
ippiAbs_32f_C1IR
ippiThreshold_LTVal_32f_C1IR
ippiDCTInvInitAlloc_32f
ippiDCTInvFree_32f
ippiDFTInitAlloc_R_32f
ippiDFTFree_R_32f
ippiFFTInitAlloc_R_32s
ippiFFTFwd_RToPack_8u32s_C1RSfs
ippiFFTFree_R_32s
ippiDFTInitAlloc_R_32s
ippiDFTFwd_RToPack_8u32s_C1RSfs
ippiDFTFree_R_32s
ippiMagnitudePack_32s_C1RSfs
ippiMulC_32f_C1IR
ippiFFTFree_R_32f
ippiAdd_32f_C1IR
ippiAddRandUniform_Direct_8u_C1IR
ippiSubC_8u_C1IRSfs
ippiDistanceTransform_3x3_8u32f_C1R
ippiInpaintInitAlloc_8u_C1R
ippiInpaintFree_8u_C1R
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_8u_P3R
ippiAddC_16s_C1IRSfs
ippiFilterDenoiseCASTInit
ippiFilterDenoiseCAST_8u_C1R
ippiFilterDenoiseAdaptiveInitAlloc_8u_C1
ippiFilterDenoiseAdaptive_8u_C1R
ippiFilterDenoiseAdaptiveFree_8u_C1
ippiPyramidInitAlloc
ippiPyramidLayerDownInitAlloc_8u_C1R
ippiPyramidLayerDownFree_8u_C1R
ippiPyramidFree
ippiOpticalFlowPyrLKInitAlloc_8u_C1R
ippiOpticalFlowPyrLKFree_8u_C1R
ippiMomentInitAlloc_64s
ippiMoments64s_8u_C1R
ippiGetSpatialMoment_64s
ippiMomentFree_64s
ippiMorphReconstructGetBufferSize_8u_C1
ippiSub_8u_C1IRSfs
ippiThreshold_GTVal_8u_C1IR
ippiXorC_8u_C1IR
ippiPyrUpGetBufSize_Gauss5x5
ippiPyrUp_Gauss5x5_8u_C1R
ippiPyrDownGetBufSize_Gauss5x5
ippiPyrDown_Gauss5x5_8u_C1R
ippiFilterDenoiseSmooth_8u_C1R
ippsFilterMedian_32s_I
ippsFilterMedian_8u_I
ippsFilterMedian_32f_I
ippiSwapChannels_8u_C4IR
ippsSwapBytes_16u_I
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C4R
ippiSwapChannels_8u_C3IR
ippsThreshold_LT_32s_I
ippsThreshold_GT_32s_I
ippsThreshold_LT_16s_I
ippsThreshold_GT_16s_I
----------------------------------------------

26|||||

ippsDivC_32f_I
ippsSqrt_32f_I
----------------------------------------------

27||||1|

ippiResizeSqrPixel_8u_C1R
----------------------------------------------

28||||1|

ippsRandGaussInitAlloc_32f
ippsRandGaussFree_32f
ippsMulC_32fc_I
ippsMulC_32f_I
ippsMul_32fc_I
ippsMul_32f32fc_I
ippsMul_32f_I
ippsSqr_32f_I
ippsAdd_32f_I
ippsAdd_32fc_I
ippsSub_32f_I
ippsSub_32fc_I
ippsConj_32fc_I
ippsAbs_32f_I
ippsTone_Direct_32fc
ippsFFTInitAlloc_C_32fc
ippsFFTFree_C_32fc
ippsFFTFwd_CToC_32fc_I
ippsFFTInv_CToC_32fc_I
----------------------------------------------

29||||1|The documentation for the tone generating functions states that they are preferable to the use of standard sin() and cos() functions because they use internal optimisations and are thus much faster.

ippsTone_Direct_32fc
----------------------------------------------

30|||||//Magnitude of the tone

ippsTone_Direct_16s
----------------------------------------------

31|||||

ippsTone_Direct_16s
ippsFFTInitAlloc_R_32s
ippsFFTFwd_RToCCS_32s_Sfs
ippsFFTFree_R_32s
----------------------------------------------

32|||||

ippiCrossCorrSame_NormLevel_8u_C1RSfs
ippiResizeSqrPixel_8u_C1R
----------------------------------------------

33|||||

ippiAddC_8u_AC4IRSfs
ippiAddRandGauss_Direct_8u_C3IR
ippiLUT_8u_AC4IR
ippiLUT_Cubic_8u_AC4IR
ippiLUT_Linear_8u_AC4IR
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C4R
ippiSwapChannels_8u_C3IR
----------------------------------------------

34||||1|

ippsAddC_32f_I
ippsAddC_64f_I
ippsAddC_32fc_I
ippsAddC_64fc_I
ippsSubC_32f_I
ippsSubC_64f_I
ippsSubC_32fc_I
ippsSubC_64fc_I
ippsSubCRev_32f_I
ippsSubCRev_64f_I
ippsSubCRev_32fc_I
ippsSubCRev_64fc_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsMulC_32fc_I
ippsMulC_64fc_I
ippsDivC_32f_I
ippsDivC_64f_I
ippsDivC_32fc_I
ippsDivC_64fc_I
ippsDivCRev_32f_I
ippsAdd_32f_I
ippsAdd_64f_I
ippsAdd_32fc_I
ippsAdd_64fc_I
ippsSub_32f_I
ippsSub_64f_I
ippsSub_32fc_I
ippsSub_64fc_I
ippsMul_32f_I
ippsMul_64f_I
ippsMul_32fc_I
ippsMul_64fc_I
ippsDiv_32f_I
ippsDiv_64f_I
ippsDiv_32fc_I
ippsDiv_64fc_I
ippsAbs_32f_I
ippsAbs_64f_I
ippsSqr_32f_I
ippsSqr_64f_I
ippsSqr_32fc_I
ippsSqr_64fc_I
ippsSqrt_32f_I
ippsSqrt_64f_I
ippsSqrt_32fc_I
ippsSqrt_64fc_I
ippsExp_32f_I
ippsExp_64f_I
ippsLn_32f_I
ippsLn_64f_I
ippsArctan_32f_I
ippsArctan_64f_I
ippsSumLn_64f
ippsCauchy_32f_I
ippsCauchyD_32f_I
ippsCauchyDD2_32f_I
ippsAndC_8u_I
ippsAndC_16u_I
ippsAndC_32u_I
ippsOrC_8u_I
ippsOrC_16u_I
ippsOrC_32u_I
ippsXorC_8u_I
ippsXorC_16u_I
ippsXorC_32u_I
ippsAnd_8u_I
ippsAnd_16u_I
ippsAnd_32u_I
ippsOr_8u_I
ippsOr_16u_I
ippsOr_32u_I
ippsXor_8u_I
ippsXor_16u_I
ippsXor_32u_I
ippsNot_8u_I
ippsNot_16u_I
ippsNot_32u_I
ippsLShiftC_8u_I
ippsLShiftC_16u_I
ippsLShiftC_16s_I
ippsLShiftC_32s_I
ippsRShiftC_8u_I
ippsRShiftC_16u_I
ippsRShiftC_16s_I
ippsRShiftC_32s_I
ippStaticInit
ippsConvCyclic8x8_32f
ippsCrossCorr_16s64s
ippsUpdateLinear_16s32s_I
ippsUpdatePower_16s32s_I
ippsConj_64fc_I
ippsPreemphasize_32f
ippsPreemphasize_16s
ippsThreshold_LT_16s_I
ippsThreshold_LT_32s_I
ippsThreshold_LT_32f_I
ippsThreshold_LT_64f_I
ippsThreshold_LT_64fc_I
ippsThreshold_GT_16s_I
ippsThreshold_GT_32s_I
ippsThreshold_GT_32f_I
ippsThreshold_GT_64f_I
ippsThreshold_GT_64fc_I
ippsThreshold_LTAbs_16s_I
ippsThreshold_LTAbs_32s_I
ippsThreshold_LTAbs_32f_I
ippsThreshold_LTAbs_64f_I
ippsThreshold_GTAbs_16s_I
ippsThreshold_GTAbs_32s_I
ippsThreshold_GTAbs_32f_I
ippsThreshold_GTAbs_64f_I
ippsThreshold_LTVal_16s_I
ippsThreshold_LTVal_32f_I
ippsThreshold_LTVal_64f_I
ippsThreshold_LTVal_64fc_I
ippsThreshold_GTVal_16s_I
ippsThreshold_GTVal_32f_I
ippsThreshold_GTVal_64f_I
ippsThreshold_GTVal_64fc_I
ippsThreshold_LTValGTVal_32f_I
ippsThreshold_LTValGTVal_64f_I
ippsThreshold_LTValGTVal_16s_I
ippsThreshold_LTValGTVal_32s_I
ippsThreshold_LTInv_32f_I
ippsThreshold_LTInv_64f_I
ippsThreshold_LTInv_64fc_I
ippsFlip_32f_I
ippsFlip_64f_I
ippsFlip_64fc_I
ippsFlip_8u_I
ippsFlip_16u_I
ippsSwapBytes_24u_I
ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippsSwapBytes_64u_I
ippsSumWindow_16s32f
ippsFIROne_Direct_64f
ippsFIR_Direct_64f
ippsFIRLMSInitAlloc_32f
ippsFIRLMSFree_32f
ippsFilterMedian_32f_I
ippsFilterMedian_64f_I
ippsFilterMedian_8u_I
ippsFilterMedian_16s_I
ippsFilterMedian_32s_I
ippsIIRInitAlloc_32f
ippsIIR_32f_I
ippsIIRFree_32f
ippsIIRInitAlloc64f_32f
ippsIIR64f_32f_I
ippsIIRFree64f_32f
ippsIIRInitAlloc_64f
ippsIIR_64f_I
ippsIIRFree_64f
ippsIIRInitAlloc_64fc
ippsIIR_64fc_I
ippsIIRFree_64fc
ippsIIRInitAlloc32f_16s
ippsIIR32f_16s_ISfs
ippsIIRFree32f_16s
ippsIIRInitAlloc64f_16s
ippsIIR64f_16s_ISfs
ippsIIRFree64f_16s
ippsIIRInitAlloc64f_32s
ippsIIR64f_32s_ISfs
ippsIIRFree64f_32s
ippsIIRInitAlloc32s_16s
ippsIIR32s_16s_Sfs
ippsIIRFree32s_16s
ippsIIROne_Direct_16s
ippsIIR_BiQuadDirect_16s_I
ippsIIR_BiQuadDirect_16s
ippsIIROne_BiQuadDirect_16s
ippsTone_Direct_32f
ippsTone_Direct_64f
ippsTone_Direct_64fc
ippsTone_Direct_16s
ippsTriangle_Direct_32f
ippsTriangle_Direct_64f
ippsTriangle_Direct_64fc
ippsTriangle_Direct_16s
ippsRandUniform_Direct_32f
ippsRandUniform_Direct_64f
ippsRandUniform_Direct_16s
ippsRandGauss_Direct_32f
ippsRandGauss_Direct_64f
ippsRandGauss_Direct_16s
ippsVectorJaehne_8s
ippsVectorSlope_8s
ippsVectorRamp_32f
ippsVectorRamp_64f
ippsVectorRamp_8s
ippsVectorRamp_16s
ippsVectorRamp_32s
ippsMaxEvery_8u_I
ippsMaxEvery_16s_I
ippsMaxEvery_32s_I
ippsMaxEvery_32f_I
ippsMaxEvery_64f_I
ippsMinEvery_8u_I
ippsMinEvery_16s_I
ippsMinEvery_32s_I
ippsMinEvery_32f_I
ippsMinEvery_64f_I
ippsDFTFree_C_64fc
ippsDFTFree_C_32f
ippsDFTFree_C_64f
ippsDFTOutOrdInitAlloc_C_64fc
ippsDFTOutOrdFwd_CToC_64fc
ippsDFTOutOrdFree_C_64fc
ippsDFTOutOrdInv_CToC_64fc
ippsFFTInitAlloc_C_64fc
ippsFFTFree_C_64fc
ippsFFTInitAlloc_C_32f
ippsFFTFree_C_32f
ippsFFTInitAlloc_C_64f
ippsFFTFree_C_64f
ippsDCTFwd_32f_I
ippsDCTFwdFree_32f
ippsDCTFwd_64f_I
ippsDCTFwdFree_64f
ippsDCTInv_32f_I
ippsDCTInvFree_32f
ippsDCTInv_64f_I
ippsDCTInvFree_64f
ippsHilbertInitAlloc_32f32fc
ippsHilbert_32f32fc
ippsHilbertFree_32f32fc
ippsWTHaarFwd_8s
ippsWTHaarFwd_32s
ippsWTHaarFwd_64s
ippsWTHaarInv_8s
ippsWTHaarInv_32s
ippsWTHaarInv_64s
ippsWinBartlett_16s_I
ippsWinBartlett_32f_I
ippsWinBartlett_64f_I
ippsWinBartlett_16sc_I
ippsWinBartlett_32fc_I
ippsWinBartlett_64fc_I
ippsWinHamming_16s_I
ippsWinHamming_32f_I
ippsWinHamming_64f_I
ippsWinHamming_16sc_I
ippsWinHamming_32fc_I
ippsWinHamming_64fc_I
ippsWinHann_16s_I
ippsWinHann_32f_I
ippsWinHann_64f_I
ippsWinHann_16sc_I
ippsWinHann_32fc_I
ippsWinHann_64fc_I
ippsWinBlackmanStd_16s_I
ippsWinBlackmanStd_32f_I
ippsWinBlackmanStd_64f_I
ippsWinBlackmanStd_16sc_I
ippsWinBlackmanStd_32fc_I
ippsWinBlackmanStd_64fc_I
ippsWinBlackmanOpt_16s_I
ippsWinBlackmanOpt_32f_I
ippsWinBlackmanOpt_64f_I
ippsWinBlackmanOpt_16sc_I
ippsWinBlackmanOpt_32fc_I
ippsWinBlackmanOpt_64fc_I
ippsWinBlackman_16s_I
ippsWinBlackman_32f_I
ippsWinBlackman_64f_I
ippsWinBlackman_16sc_I
ippsWinBlackman_32fc_I
ippsWinBlackman_64fc_I
ippsWinKaiser_64f_I
ippsWinKaiser_64fc_I
ippsWinKaiser_16s_I
ippsWinKaiser_32f_I
ippsWinKaiser_16sc_I
ippsWinKaiser_32fc_I
----------------------------------------------

35||||1|We use those functions in a context in which we can afford dynamic allocation. We need to know our processing objects size at compile time.

ippsFIR_Direct_32f
ippsFIR_Direct_64f
----------------------------------------------

36||||1|We use this function to update our IIRFilters coefficients in a realtime context.

ippsIIRSetTaps64f_32f
----------------------------------------------

37|||||

ippsMulPerm_32f_I
ippsConjPerm_32fc_I
----------------------------------------------

38|||||

ippsDemodulateFM_CToR_16s
----------------------------------------------

39|||||

ippsSqrt_32f_I
----------------------------------------------

40||||1|The cross correlation functions are very useful and important to keep.  Retaining the in-place functions is also important to us.

ippiAddC_32f_C1IR
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_64f_C1R
ippiDFTFree_R_32f
ippiDFTInitAlloc_R_32f
ippiDiv_32f_C1IR
ippiDivC_32f_C1IR
ippiExp_32f_C1IR
ippiMirror_32f_C1IR
ippiMulC_32f_C1IR
ippiSqrt_32f_C1IR
ippiSubC_32f_C1IR
ippiThreshold_LTValGTVal_32f_C1IR
ippsAdd_64f_I
ippsAddC_64f_I
ippsDivC_32f_I
ippsDivC_64f_I
ippsMaxEvery_64f_I
ippsMul_64f_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsSubC_64f_I
ippsSubCRev_64f_I
ippsThreshold_LTValGTVal_32f_I
ippsThreshold_LTValGTVal_64f_I
ippiDFTFwd_RToPack_32f_C1IR
ippiDFTInv_PackToR_32f_C1IR
ippiMorphologyInitAlloc_32f_C1R
ippiMorphologyInitAlloc_8u_C1R
ipprResize_16u_C1V
ipprResizeGetBufSize
----------------------------------------------

41|||||

ippiResizeSqrPixel_8u_C1R
----------------------------------------------

42||||1|Additionally, ippiFilterMedian_8u_C1R & ippiFilterMedian_8u_AC4R optimizations broke some time between version 3.0 and version 6.1.  They were considerably faster in version 3.0 and now run as if there is no optimization at all.

ippiAbs_16s_C1IR
ippiAbs_16s_AC4IR
ippiAdd_8u_C1IRSfs
ippiAdd_8u_AC4IRSfs
ippiAdd_8u_AC4RSfs
ippiAddC_8u_C1IRSfs
ippiAddC_8u_AC4IRSfs
ippiAdd_16s_C1IRSfs
ippiAdd_16s_AC4IRSfs
ippiAddC_32f_AC4R
ippiConvert_8u16s_AC4R
ippiConvert_16s8u_AC4R
ippiDilate3x3_8u_C1IR
ippiDilate3x3_8u_AC4IR
ippiDiv_8u_C1IRSfs
ippiErode3x3_8u_C1IR
ippiErode3x3_8u_AC4IR
ippiLShiftC_8u_C1IR
ippiLShiftC_8u_AC4IR
ippiAddC_16s_AC4IRSfs
ippiAddC_16s_C1IRSfs
ippiMirror_8u_C1IR
ippiMirror_8u_AC4IR
ippiMulC_8u_C1IRSfs
ippiMulC_8u_AC4IRSfs
ippiMulC_8u_AC4RSfs
ippiMulCScale_8u_C1IR
ippiMulCScale_8u_AC4IR
ippiNot_8u_C1IR
ippiNot_8u_AC4IR
ippiOr_8u_C1IR
ippiOr_8u_AC4IR
ippiRemap_8u_AC4R
ippiScale_8u16s_AC4R
ippiScale_16s8u_AC4R
ippiSub_8u_C1IRSfs
ippiSub_8u_AC4IRSfs
ippiSub_16s_C1IRSfs
ippiSub_16s_AC4IRSfs
ippiWarpBilinearBack_8u_AC4R
ippiWarpAffine_8u_AC4R
ippsAddC_16s_I
ippsAddC_64f_I
ippsFFTFree_C_64fc
ippsFFTInitAlloc_C_64fc
ippsMulC_64f_I
ippsFilterMedian_16s_I
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_AC4R
ippiThreshold_GTVal_8u_C1IR
ippiThreshold_GTVal_8u_AC4IR
ippiWarpPerspectiveBack_8u_AC4R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiSqrDistanceValid_Norm_32f_C1R
ippiSqrDistanceValid_Norm_8u32f_C1R
ippiCrossCorrValid_Norm_32f_C1R
ippiCrossCorrValid_Norm_8u32f_C1R
----------------------------------------------

43||||1|Kindly provide a how to migrate/replace the deprecated function.We are facing a real problem with these changes like the removal of speech recognition library. We were using a quite few functions from it. We dont have any clue to sustain those apllication as the libaray changing in a manner its a hard work for us to upgrade.

ippsFIRInitAlloc_32f
ippsFIRFree_32f
ippsFIRMRInitAlloc_32f
ippsFIRInitAlloc_32fc
ippsFIRFree_32fc
ippsFIRMRInitAlloc64f_32f
ippsFIRFree64f_32f
ippsTone_Direct_32fc
ippsTone_Direct_64fc
ippsMulC_32f_I
ippsDFTFree_C_32f
ippsFFTFree_C_32f
ippsFFTInitAlloc_C_32f
ippsFFTFwd_CToC_32f_I
ippsFFTInv_CToC_32f_I
----------------------------------------------

44|||||

ippsRandGaussInitAlloc_32f
----------------------------------------------

45|||||

ippsRandGauss_Direct_32f
----------------------------------------------

46|||||

ippsMulC_32fc_I
----------------------------------------------

47||||1|Another question regarding deprecated functions...

ippsMulC_32f_I
----------------------------------------------

48|||||As a general rule, please do not remove the "inplace" functionality. Without it, substantial refactoring of the code is often necessary, and as a result - given the risks involved - We Will Not Use the eventual future libraries without this functionality. Removing APIs, an action that pushes a lot of work on the developper side (i.e. substantial refactoring of potentially old and very well tested, shipping code) should NEVER be done. Microsoft Windows is far bigger than IPP and still they manage to Never EVER break user code as you plan to do. For example I may ask why on earth would you remove in-place byte swapping: read data in a buffer, swap in place, use it. Why allocate twice the memory? This does not make sense. For every change you must assess the impact on user code, and if it's more than search-and-replace (i.e. no user code change AT ALL, as you actually do it yourself with #defines in a header) then DONT DO IT. Add as many new and improved APIs as you see fit, stop maintaining/improving old ones, but never remove anything. Thank you.

ippiMirror_8u_C1IR
ippiMirror_16u_C3IR
ippsSwapBytes_16u_I
ippiSwapChannels_8u_C3IR
----------------------------------------------

49||||1|This function and other deprecated functions are used in Intel's sample code for G.722 Codec, but the sample code has not been updated with whatever should replace ippsMul_16s32s_Sfs, and the deprecation warning for this function does not list a replacement.

ippsMul_16s32s_Sfs
----------------------------------------------

50||||1|Hallo,

ippiInitAllocHuffmanTable_DV_32u
ippiHuffmanDecodeSegment_DV_8u16s
ippiHuffmanDecodeSegment_DV100_8u16s
ippiHuffmanDecodeSegmentOnePass_DV_8u16s
ippiFreeHuffmanTable_DV_32u
ippiQuantInv_DV_16s_C1I
ippiQuantWeightBlockInv_DV100_16s_C1I
ippiQuantWeightBlockInv_DV_16s_C1I
ippiDCT2x4x8Inv_16s_C1I
ippiDCT8x4x2To4x4Inv_DV_16s_C1I
ippiYCrCb422ToYCbCr422_5MBDV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_5MBDV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_ZoomOut4_5MBDV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_ZoomOut8_5MBDV_16s8u_P3C2R
ippiYCrCb420ToYCbCr422_5MBDV_16s8u_P3C2R
ippiYCrCb420ToYCbCr422_ZoomOut4_5MBDV_16s8u_P3C2R
ippiYCrCb420ToYCbCr422_ZoomOut8_5MBDV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_ZoomOut2_5MBDV_16s8u_P3C2R
ippiYCrCb420ToYCbCr422_ZoomOut2_5MBDV_16s8u_P3C2R
ippiYCrCb422ToYCbCr422_ZoomOut2_5MBDV_16s8u_P3C2R
ippiYCrCb422ToYCbCr422_ZoomOut4_5MBDV_16s8u_P3C2R
ippiYCrCb422ToYCbCr422_ZoomOut8_5MBDV_16s8u_P3C2R
ippiYCrCb422ToYCbCr422_10HalvesMB16x8_DV100_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_16x4x5MB_DV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_8x8MB_DV_16s8u_P3C2R
ippiYCrCb420ToYCbCr422_8x8x5MB_DV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_ZoomOut8_EdgeDV_16s8u_P3C2R
----------------------------------------------

51||||1|It looks like the entire "Realistic Rendering and 3D Data Processing" set of functions is now deprecated.  These functions are used in a core part of our product, and we'd have to rewrite them ourselves if IPP no longer provides them (or keep using an older version of IPP).

ipprTriangleAccelInit
ipprKDTreeBuildAlloc
ipprSetBoundBox_32f
ipprTriangleAccelGetSize
ipprIntersectEyeSO_32f
----------------------------------------------

52|||||

ippStaticInit
ippsFIRFree_32f
ippsAdd_32f_I
ippsMul_32f_I
ippsMulC_32f_I
ippsAddC_32f_I
ippsThreshold_GT_32f_I
ippsAbs_32f_I
ippsSub_32f_I
ippsSqrt_32f_I
ippsFIRMRInitAlloc_32f
----------------------------------------------

53|||||

ippiAbs_32f_C1IR
ippiAdd_32f_C1IR
ippiAddC_16s_C1IRSfs
ippiAddC_16s_C3IRSfs
ippiAddC_32f_C1IR
ippiAddC_8u_C1IRSfs
ippiAddRandGauss_Direct_8u_C1IR
ippiAddRandGauss_Direct_8u_C3IR
ippiAddRandUniform_Direct_8u_C1IR
ippiAddRandUniform_Direct_8u_C3IR
ippiAnd_8u_C1IR
ippiAnd_8u_C3IR
ippiAndC_16u_C1IR
ippiAndC_16u_C3IR
ippiAndC_8u_C3IR
ippiComputeThreshold_Otsu_8u_C1R
ippiCopyReplicateBorder_32f_C1IR
ippiCopyReplicateBorder_32f_C3IR
ippiCopyReplicateBorder_8u_C1IR
ippiCopyReplicateBorder_8u_C3IR
ippiCopyWrapBorder_32f_C1IR
ippiCrossCorrFull_Norm_8u32f_C1R
ippiCrossCorrFull_Norm_8u32f_C3R
ippiCrossCorrFull_NormLevel_8u32f_C1R
ippiCrossCorrFull_NormLevel_8u32f_C3R
ippiCrossCorrSame_Norm_8u32f_C1R
ippiCrossCorrSame_Norm_8u32f_C3R
ippiCrossCorrSame_NormLevel_8u32f_C1R
ippiCrossCorrSame_NormLevel_8u32f_C3R
ippiCrossCorrValid_Norm_8u32f_C1R
ippiCrossCorrValid_Norm_8u32f_C3R
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C3R
ippiDCTFwdFree_32f
ippiDCTFwdInitAlloc_32f
ippiDCTInvFree_32f
ippiDCTInvInitAlloc_32f
ippiDFTFree_R_32f
ippiDFTFwd_RToPack_32f_C1IR
ippiDFTFwd_RToPack_32f_C3IR
ippiDFTInitAlloc_R_32f
ippiDFTInv_PackToR_32f_C1IR
ippiDFTInv_PackToR_32f_C3IR
ippiDilate3x3_8u_C1IR
ippiDilate3x3_8u_C3IR
ippiDistanceTransform_3x3_8u32f_C1R
ippiDistanceTransform_5x5_8u32f_C1R
ippiErode3x3_8u_C1IR
ippiErode3x3_8u_C3IR
ippiFFTFree_R_32f
ippiFFTFwd_RToPack_32f_C1IR
ippiFFTFwd_RToPack_32f_C3IR
ippiFFTInv_PackToR_32f_C1IR
ippiFFTInv_PackToR_32f_C3IR
ippiFilterBox_32f_C1IR
ippiHaarClassifierFree_32f
ippiHaarClassifierInitAlloc_32f
ippiInpaintFree_8u_C1R
ippiInpaintFree_8u_C3R
ippiInpaintInitAlloc_8u_C1R
ippiInpaintInitAlloc_8u_C3R
ippiLn_32f_C1IR
ippiLUT_8u_C3IR
ippiLUT_Cubic_8u_C1IR
ippiMomentFree_64f
ippiMomentInitAlloc_64f
ippiMorphologyInitAlloc_8u_C1R
ippiMorphologyInitAlloc_8u_C3R
ippiMorphReconstructGetBufferSize_8u_C1
ippiMulC_16s_C3IRSfs
ippiMulC_32f_C1IR
ippiMulC_32f_C3IR
ippiMulC_8u_C1IRSfs
ippiMulC_8u_C3IRSfs
ippiMulPack_32f_C1IR
ippiMulPack_32f_C3IR
ippiNot_8u_C1IR
ippiOr_8u_C1IR
ippiOr_8u_C3IR
ippiOrC_8u_C3IR
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_C3R
ippiRShiftC_8u_C1IR
ippiSqr_32f_C1IR
ippiSqrDistanceFull_Norm_8u32f_C1R
ippiSqrDistanceFull_Norm_8u32f_C3R
ippiSqrDistanceSame_Norm_8u32f_C1R
ippiSqrDistanceSame_Norm_8u32f_C3R
ippiSqrDistanceValid_Norm_8u32f_C1R
ippiSqrDistanceValid_Norm_8u32f_C3R
ippiSub_16s_C1IRSfs
ippiSub_16s_C3IRSfs
ippiSub_8u_C1IRSfs
ippiSubC_32f_C1IR
ippiSubC_32f_C3IR
ippiSwapChannels_8u_C3IR
ippiThreshold_GT_32f_C1IR
ippiThreshold_GT_8u_C1IR
ippiThreshold_GTVal_8u_C1IR
ippiThreshold_LT_32f_C1IR
ippiThreshold_LTVal_8u_C1IR
ippiThreshold_LTVal_8u_C3IR
ippiXor_8u_C1IR
ippiXor_8u_C3IR
ippsAdd_32f_I
ippsAdd_64f_I
ippsAdd_8u_ISfs
ippsAddC_32f_I
ippsDivC_32f_I
ippsExp_32f_I
ippsLn_64f_I
ippsMul_32f_I
ippsMul_64f_I
ippsMul_8u_ISfs
ippsMulC_32f_I
ippsMulC_64f_I
ippsNot_8u_I
ippsRandUniform_Direct_16s
ippsSqr_32f_I
ippsSqrt_32f_I
ippsSub_32f_I
ippsSubC_32f_I
ippsSubCRev_32f_I
ippsThreshold_GTVal_32f_I
ippsThreshold_LT_32f_I
ippsThreshold_LTValGTVal_32f_I
ippsTone_Direct_32f
ippsVectorRamp_32f
ippsVectorRamp_32s
ippsVectorRamp_8u
----------------------------------------------

54||||1|Given that a number of CORE functions are being flagged as deprecated, I assume that their functionality is not to be deprecated, just covered by other functions.

ippsDFTFree_C_32fc
ippsDFTFree_R_32f
ippsFlip_32f_I
ippsMul_32fc_I
ippsMul_32f_I
ippsMulC_32f_I
ippStaticInit
ippsTone_Direct_32f
ippsTone_Direct_32fc
ippsVectorRamp_32f
----------------------------------------------

55|||||

ippiSwapChannels_8u_C3IR
----------------------------------------------

56||||1|Inline versions of the functions are very useful to us. We use very large images and 

ippiDilate_8u_C1IR
ippiAdd_8u_C1IRSfs
ippiDilate3x3_8u_C1IR
ippiThreshold_GTVal_8u_C1IR
ippiMulC_32f_C1IR
ippiMul_32f_C1IR
ippiMulScale_8u_C1IR
ippiMulScale_8u_C3IR
ippiMulScale_8u_AC4IR
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C4R
ippiMirror_8u_C3IR
ippiAnd_8u_C1IR
ippiOr_8u_C1IR
ippsThreshold_LTVal_64f_I
ippsThreshold_GTVal_64f_I
ippsFilterMedian_32f_I
ippsFilterMedian_64f_I
ippsFilterMedian_32s_I
ippiAddC_8u_C1IRSfs
ippiAddC_16u_C1IRSfs
ippiSubC_8u_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiAdd_16s_C1IRSfs
ippiAdd_16u_C1IRSfs
ippiSub_8u_C1IRSfs
ippiSub_16u_C1IRSfs
ippiAddC_32f_C1IR
ippiSubC_32f_C1IR
ippiAdd_32f_C1IR
ippiSub_32f_C1IR
ippiDiv_16s_C1IRSfs
ippiDiv_8u_C1IRSfs
ippiDivC_16s_C1IRSfs
ippiDivC_8u_C1IRSfs
ippiSqr_8u_C1IRSfs
ippiSqr_16s_C1IRSfs
ippiSqrt_8u_C1IRSfs
ippiSqrt_16s_C1IRSfs
ippiMirror_8u_C1IR
ippiResizeSqrPixel_8u_C1R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiThreshold_GT_8u_C1IR
ippiThreshold_LT_8u_C1IR
ippiThreshold_LTVal_8u_C1IR
ippiComputeThreshold_Otsu_8u_C1R
ippiAndC_8u_C1IR
ippiAnd_16u_C1IR
ippiAndC_16u_C1IR
ippiOrC_8u_C1IR
ippiOr_16u_C1IR
ippiOrC_16u_C1IR
ippiXor_8u_C1IR
ippiXorC_8u_C1IR
ippiXor_16u_C1IR
ippiXorC_16u_C1IR
ippiNot_8u_C1IR
ippiLShiftC_8u_C1IR
ippiLShiftC_16u_C1IR
ippiRShiftC_8u_C1IR
ippiRShiftC_16u_C1IR
ippiErode3x3_8u_C1IR
ippStaticInit
ippiMirror_8u_C4IR
ippiLUT_8u_C1IR
ippiDistanceTransform_5x5_8u_C1IR
ippiThreshold_LT_32f_C1IR
ippiThreshold_GT_32f_C1IR
----------------------------------------------

57||||1|

ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_32f_C1R
----------------------------------------------

58|||||Cross correlation functions are critical in the field of image and video processing and we have been using them heavily for many years.

ippiCrossCorrValid_NormLevel_32f_C1R
----------------------------------------------

59||||1|

ippiMomentInitAlloc_64f
ippiMomentInitAlloc_64s
ippiMomentFree_64f
ippiMomentFree_64s
ippiMoments64s_8u_C1R
ippiGetSpatialMoment_64s
ippiResizeSqrPixel_8u_C1R
ippiResizeYUV422_8u_C2R
ippiThreshold_Val_32f_C1IR
ippsThreshold_32f_I
ippiThreshold_LTVal_8u_C1IR
ippiThreshold_LTValGTVal_8u_C1IR
ippiThreshold_GTVal_8u_C1IR
ippiThreshold_LT_8u_C1IR
ippsSub_64f_I
ippiSubC_8u_C1IRSfs
ippiSubC_16s_C1IRSfs
ippiSub_32f_C1IR
ippiAdd_8u_C1IRSfs
ippsAdd_32u
ippiAdd_16s_C1IRSfs
ippiAddC_16s_C1IRSfs
ippiAddC_16u_C1IRSfs
ippiAddC_8u_C1IRSfs
ippiAdd_32f_C1IR
ippiAddC_32f_C1IR
ippsAddC_32f_I
ippsAddC_64f_I
ippsSqr_64f_I
ippiSqrt_32f_C1IR
ippiMulC_32f_C1IR
ippiMul_32f_C1IR
ippiMulC_16s_C1IRSfs
ippiDiv_16s_C1IRSfs
ippiDiv_32f_C1IR
ippiDivC_32f_C1IR
ippiAbs_32f_C1IR
ippiRShiftC_8u_C1IR
ippiYUV420ToRGB444_8u16u_P3C3R
ippiYUV420ToRGB555_8u16u_P3C3R
ippiYUV420ToRGB565_8u16u_P3C3R
ippiResizeSqrPixel_8u_P3R
ippiMirror_8u_C3IR
ippiYCbCr422ToRGB555_8u16u_C2C3R
ippiYCbCr422ToBGR555_8u16u_C2C3R
ippiYCbCr422ToRGB565_8u16u_C2C3R
ippiYCbCr422ToBGR565_8u16u_C2C3R
ippiAbs_16s_C1IR
ippiFilterBox_16s_C1IR
ippiNot_8u_C1IR
ippiAnd_8u_C1IR
ippiOr_8u_C1IR
ippiXor_8u_C1IR
ippiConvFull_32f_C1R
ippiDilate_8u_C1IR
ippiDilate3x3_8u_C1IR
ippiErode_8u_C1IR
ippiMorphReconstructGetBufferSize_8u_C1
ippiSwapChannels_8u_C4IR
----------------------------------------------

60||||1|ippsMulC_32f_I and ippsAddC_32f_I are vital to new performance-optimization updates to multiple existing commercial applications of ours.

ippsFindC_16u
ippsMulC_32f_I
ippsAddC_32f_I
----------------------------------------------

61||||1|

ippiYCrCb422ToYCbCr422_10HalvesMB16x8_DV100_16s8u_P3C2R
ippiHuffmanDecodeSegment_DV100_8u16s
ippiQuantWeightBlockInv_DV100_16s_C1I
ippiHuffmanDecodeSegment_DV_8u16s
ippiQuantInv_DV_16s_C1I
ippiDCT2x4x8Inv_16s_C1I
ippiYCrCb420ToYCbCr422_5MBDV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_EdgeDV_16s8u_P3C2R
ippiYCrCb411ToYCbCr422_5MBDV_16s8u_P3C2R
ippiResizeYUV422_8u_C2R
ippiEncodeCoeffsIntra_H261_16s1u
ippiFreeHuffmanTable_DV_32u
ippiHuffmanDecodeSegmentOnePass_DV_8u16s
ippiInitAllocHuffmanTable_DV_32u
ippiQuantWeightBlockInv_DV_16s_C1I
ippiFilter8x8_H261_8u_C1R
ippiDownsampleFour16x16_H263_16s_C1R
----------------------------------------------

62|||||

ippiResizeSqrPixel_8u_AC4R
----------------------------------------------

63|||||

ippiResizeSqrPixel_8u_C1R
----------------------------------------------

64||||1|The deinterlace functions work ok, why should they be removed?

ippiDeinterlaceFilterCAVT_8u_C1R
----------------------------------------------

65|||||

ippiSqrDistanceFull_Norm_8u_C1RSfs
ippiSqrDistanceFull_Norm_8u_C3RSfs
ippiSqrDistanceFull_Norm_8u_AC4RSfs
ippiSqrDistanceSame_Norm_8u_C1RSfs
ippiSqrDistanceSame_Norm_8u_C3RSfs
ippiSqrDistanceSame_Norm_8u_AC4RSfs
ippiSqrDistanceValid_Norm_8u_C1RSfs
ippiSqrDistanceValid_Norm_8u_C3RSfs
ippiSqrDistanceValid_Norm_8u_AC4RSfs
ippiCrossCorrFull_Norm_8u_C1RSfs
ippiCrossCorrFull_Norm_8u_C3RSfs
ippiCrossCorrFull_Norm_8u_AC4RSfs
ippiCrossCorrSame_Norm_8u_C1RSfs
ippiCrossCorrSame_Norm_8u_C3RSfs
ippiCrossCorrSame_Norm_8u_AC4RSfs
ippiCrossCorrValid_Norm_8u_C1RSfs
ippiCrossCorrValid_Norm_8u_C3RSfs
ippiCrossCorrValid_Norm_8u_AC4RSfs
ippiCrossCorrFull_NormLevel_8u_C1RSfs
ippiCrossCorrFull_NormLevel_8u_C3RSfs
ippiCrossCorrFull_NormLevel_8u_AC4RSfs
ippiCrossCorrSame_NormLevel_8u_C1RSfs
ippiCrossCorrSame_NormLevel_8u_C3RSfs
ippiCrossCorrSame_NormLevel_8u_AC4RSfs
ippiCrossCorrValid_NormLevel_8u_C1RSfs
ippiCrossCorrValid_NormLevel_8u_C3RSfs
ippiCrossCorrValid_NormLevel_8u_AC4RSfs
ippiSqrDistanceFull_Norm_32f_C1R
ippiSqrDistanceFull_Norm_32f_C3R
ippiSqrDistanceFull_Norm_32f_AC4R
ippiSqrDistanceSame_Norm_32f_C1R
ippiSqrDistanceSame_Norm_32f_C3R
ippiSqrDistanceSame_Norm_32f_AC4R
ippiSqrDistanceValid_Norm_32f_C1R
ippiSqrDistanceValid_Norm_32f_C3R
ippiSqrDistanceValid_Norm_32f_AC4R
ippiCrossCorrFull_Norm_32f_C1R
ippiCrossCorrFull_Norm_32f_C3R
ippiCrossCorrFull_Norm_32f_AC4R
ippiCrossCorrSame_Norm_32f_C1R
ippiCrossCorrSame_Norm_32f_C3R
ippiCrossCorrSame_Norm_32f_AC4R
ippiCrossCorrValid_Norm_32f_C1R
ippiCrossCorrValid_Norm_32f_C3R
ippiCrossCorrValid_Norm_32f_AC4R
ippiCrossCorrFull_NormLevel_32f_C1R
ippiCrossCorrFull_NormLevel_32f_C3R
ippiCrossCorrFull_NormLevel_32f_AC4R
ippiCrossCorrSame_NormLevel_32f_C1R
ippiCrossCorrSame_NormLevel_32f_C3R
ippiCrossCorrSame_NormLevel_32f_AC4R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_32f_C3R
ippiCrossCorrValid_NormLevel_32f_AC4R
----------------------------------------------

66|||||

ippiDeinterlaceFilterCAVT_8u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeYUV422_8u_C2R
----------------------------------------------

67|||||

ippiCrossCorrValid_NormLevel_8u32f_C1R
ippsGoertzTwo_32fc
ippsSplitScaled_16s32f_D2L
----------------------------------------------

68||||1|

ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C4R
----------------------------------------------

69||||1|We use theses fun in sepral part of our code, ie with ac3 decoding (part of the ac3 decoding sample).

ippsAdd_32f_I
ippsMulC_32f_I
ippsSub_32f_I
----------------------------------------------

70|||||

ippiConvFull_32f_C1R
ippiConvValid_32f_C1R
----------------------------------------------

71|||||

ippiCrossCorrValid_Norm_8u_C1RSfs
----------------------------------------------

72||||1|I am attempting to upgrade from IPP 7.0 to 7.1, something that should be a minor update.  Instead, it looks like nearly half of IPP is deprecated, and a lot code based on IPP 7.0 samples no longer even compiles.  Honestly, this has me thinking that our decision to rely on IPP was an expensive mistake, and I am currently thinking seriously about ripping IPP out of our product.  Very disappointing.

ippsIIRFree64f_32s
ippsIIR64f_32s_ISfs
ippsIIRInitAlloc64f_BiQuad_32s
ippiResizeYUV422_8u_C2R
ippStaticInit
ippiMirror_16u_C1IR
ippsSwapBytes_16u_I
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_C4R
ippsMulC_32f_I
ippsJoin_32f16s_D2L
ippsAdd_32f_I
ippsSub_32f_I
ippsVLCDecodeOne_1u16s
ippsVLCDecodeBlock_1u16s
ippsVLCDecodeUTupleBlock_1u16s
ippsMul_32f_I
ippsVLCEncodeGetSize_32s
ippsVLCEncodeInit_32s
ippsVLCCountBits_16s32s
ippsVLCDecodeGetSize_32s
ippsVLCDecodeInit_32s
ippsRShiftC_32s_I
ippsLShiftC_32s_I
----------------------------------------------

73||||1|We were planning a project based in using IPP ray casting functions.

ipprIntersectMO_32f
----------------------------------------------

74||||1|

ippiResizeYUV422_8u_C2R
----------------------------------------------

75||||1|

ippsTone_Direct_32fc
ippsTone_Direct_32f
----------------------------------------------

76|||||

ippiAddC_32f_C1IR
ippiAnd_8u_C3IR
ippiAnd_8u_C1IR
ippiMorphologyInitAlloc_8u_C1R
ippiMomentInitAlloc_64f
ippiMomentFree_64f
ippiSub_32f_C1IR
ippiMulC_32f_C1IR
ippiAdd_32f_C1IR
ippiConvFull_32f_C1R
ippiPyrUpGetBufSize_Gauss5x5
ippiPyrUp_Gauss5x5_8u_C1R
ippiSub_8u_C1IRSfs
ippiOr_16u_C1IR
ippiMulC_32f_C3IR
ippiAnd_16u_C1IR
ippiOr_8u_C3IR
----------------------------------------------

77||||1|Hi,

ippiAddC_32f_C1IR
ippiAnd_8u_C3IR
ippiAnd_8u_C1IR
ippiMorphologyInitAlloc_8u_C1R
ippiMomentInitAlloc_64f
ippiMomentFree_64f
ippiSub_32f_C1IR
ippiMulC_32f_C1IR
ippiAdd_32f_C1IR
ippiConvFull_32f_C1R
ippiPyrUpGetBufSize_Gauss5x5
ippiPyrUp_Gauss5x5_8u_C1R
ippiSub_8u_C1IRSfs
ippiOr_16u_C1IR
ippiMulC_32f_C3IR
ippiAnd_16u_C1IR
ippiOr_8u_C3IR
----------------------------------------------

78||||1|Hi, 

ippiMomentInitAlloc_64f
----------------------------------------------

79||||1|odnWX5  

----------------------------------------------

80|||||

ippsFFTFwd_CToC_64fc_I
ippsMul_64fc_I
ippsFFTInv_CToC_64fc_I
----------------------------------------------

81||||1|I'm using this function quite extensively.  It has many issues and is quite limited; however, I still find it useful and my code depends on it.  What are the planned changes?

ippiConvValid_32f_C1R
----------------------------------------------

82||||1|I am the author of a high performance computing environment that we use in-house (think Matlab but more specialized and way faster)

ippsMulC_16s_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsMulC_32fc_I
ippsMulC_64fc_I
ippsMulC_8u_ISfs
ippsMulC_16u_ISfs
ippsMulC_16s_ISfs
ippsMulC_32s_ISfs
ippsMulC_64s_ISfs
ippsMulC_64f64s_ISfs
ippsMulC_16sc_ISfs
ippsMulC_32sc_ISfs
ippsAddC_16s_I
ippsAddC_32f_I
ippsAddC_64f_I
ippsAddC_32fc_I
ippsAddC_64fc_I
ippsAddC_8u_ISfs
ippsAddC_16u_ISfs
ippsAddC_16s_ISfs
ippsAddC_32s_ISfs
ippsAddC_16sc_ISfs
ippsAddC_32sc_ISfs
ippsAdd_16s_I
ippsAdd_32f_I
ippsAdd_64f_I
ippsAdd_32fc_I
ippsAdd_64fc_I
ippsAdd_16s32s_I
ippsAdd_8u_ISfs
ippsAdd_16u_ISfs
ippsAdd_16s_ISfs
ippsAdd_32s_ISfs
ippsAdd_16sc_ISfs
ippsAdd_32sc_ISfs
ippsMul_16s_I
ippsMul_32f_I
ippsMul_64f_I
ippsMul_32fc_I
ippsMul_64fc_I
ippsMul_32f32fc_I
ippsMul_8u_ISfs
ippsMul_16u_ISfs
ippsMul_16s_ISfs
ippsMul_32s_ISfs
ippsMul_16sc_ISfs
ippsMul_32sc_ISfs
ippsMul_32s32sc_ISfs
ippsSubC_16s_I
ippsSubC_32f_I
ippsSubC_64f_I
ippsSubC_32fc_I
ippsSubC_64fc_I
ippsSubC_8u_ISfs
ippsSubC_16u_ISfs
ippsSubC_16s_ISfs
ippsSubC_32s_ISfs
ippsSubC_16sc_ISfs
ippsSubC_32sc_ISfs
ippsSubCRev_32f_I
ippsSubCRev_64f_I
ippsSubCRev_32fc_I
ippsSubCRev_64fc_I
ippsSubCRev_8u_ISfs
ippsSubCRev_16u_ISfs
ippsSubCRev_16s_ISfs
ippsSubCRev_32s_ISfs
ippsSubCRev_16sc_ISfs
ippsSubCRev_32sc_ISfs
ippsSub_16s_I
ippsSub_32f_I
ippsSub_64f_I
ippsSub_32fc_I
ippsSub_64fc_I
ippsSub_8u_ISfs
ippsSub_16u_ISfs
ippsSub_16s_ISfs
ippsSub_32s_ISfs
ippsSub_16sc_ISfs
ippsSub_32sc_ISfs
ippsDivC_32f_I
ippsDivC_64f_I
ippsDivC_32fc_I
ippsDivC_64fc_I
ippsDivC_8u_ISfs
ippsDivC_16u_ISfs
ippsDivC_16s_ISfs
ippsDivC_64s_ISfs
ippsDivC_16sc_ISfs
ippsDivCRev_16u_I
ippsDivCRev_32f_I
ippsDiv_8u_ISfs
ippsDiv_16u_ISfs
ippsDiv_16s_ISfs
ippsDiv_16sc_ISfs
ippsDiv_32s_ISfs
ippsDiv_32f_I
ippsDiv_64f_I
ippsDiv_32fc_I
ippsDiv_64fc_I
ippsDiv_Round_8u_ISfs
ippsDiv_Round_16u_ISfs
ippsDiv_Round_16s_ISfs
ippsSqr_32f_I
ippsSqr_64f_I
ippsSqr_32fc_I
ippsSqr_64fc_I
ippsSqr_8u_ISfs
ippsSqr_16s_ISfs
ippsSqr_16u_ISfs
ippsSqr_16sc_ISfs
ippsSqrt_8u_ISfs
ippsSqrt_16s_ISfs
ippsSqrt_16u_ISfs
ippsSqrt_16sc_ISfs
ippsSqrt_64s_ISfs
ippsSqrt_64s16s_Sfs
ippsSqrt_64s_Sfs
ippsSqrt_32f_I
ippsSqrt_64f_I
ippsSqrt_32fc_I
ippsSqrt_64fc_I
ippsExp_32f_I
ippsExp_64f_I
ippsExp_64s_Sfs
ippsExp_16s_ISfs
ippsExp_32s_ISfs
ippsExp_64s_ISfs
ippsLn_16s_ISfs
ippsLn_32s_ISfs
ippsLn_64f32f
ippsLn_32f_I
ippsLn_64f_I
----------------------------------------------

83||||1|My code makes use of ippiMomentInitAlloc_64f to get a IppiMomentState_64f structure. As far as I can tell, this is an opaque structure that I cannot allocate on my own because I don't know how large it should be.

ippiMomentGetStateSize_64s
ippiMomentInitAlloc_64f
ippiMomentInitAlloc_64s
ippiMomentFree_64f
ippiMomentFree_64s
----------------------------------------------

84||||1|We are working on imaging SDK for .NET and using your resizer inside. It would be very inconvenient for us to use different resize methods for different interpolation modes, because of additional wrapper code.

ippiSwapChannels_8u_C3IR
ippiSwapChannels_8u_C4IR
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_16u_C4R
ippiResizeSqrPixel_8u_P3R
ippiResizeSqrPixel_16u_P3R
----------------------------------------------

85|||||IF the filter is deprecated what should I use instead?  Code example please or URL.

ippsFIR_Direct_32f
ippsFIR_Direct_32fc
----------------------------------------------

86||||1|

ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiCrossCorrValid_NormLevel_8s32f_C1R
ippiMinMaxIndx_8s_C1R
ippiDFTInitAlloc_R_32f
ippiDFTFree_R_32f
----------------------------------------------

87|||||

ippiZigzagInv8x8_16s_C1
----------------------------------------------

88||||1|I don't object to deprecating these functions, but I cannot locate documentation about what to replace them with.  The compiler warning states "Internal memory allocation will not be supported - use Get<Buffer>Size and Init pair for this functionality."  This warning only makes sense WRT the allocation functions,  which are not deprecated yet.  Should use free, or _aligned_free?  Should I continue to use these functions until new allocation functions are supplied? 

ippsWTFwdFree_32f
ippsWTInvFree_32f
----------------------------------------------

89||||1|

ippiResizeSqrPixel_32f_C1R
ipps10Log10_32s_ISfs
----------------------------------------------

90||||1|ippiFilterDeblockingChroma422VerEdgeMBAFF_H264_16u_C1IR

----------------------------------------------

91|||||As far as one can tell, all the necessary base functions supporting 256-bit Rijndael operation are deprecated? Is only 128-bit going to be supported? If so, there appears to be no reason to pay large sums to Intel for IPP cs. simply using OpenSSH or Boost.

ippsRijndael256Init
ippsRijndael256DecryptCFB
ippsRijndael256DecryptCBC
ippsMTFInitAlloc_8u
ippsMTFFree_8u
ippsRijndael256GetSize
ippsRijndael256EncryptCFB
ippsRijndael256EncryptCBC
ippsDecodeRLE_8u
ippsEncodeRLE_8u
ippsMulC_64f_I
ippsAdd_64f_I
ippsDivC_64f_I
ippsHuffLenCodeTableUnpack_8u
ippsDecodeHuffInitAlloc_8u
ippsHuffFree_8u
ippsHuffGetDstBuffSize_8u
ippsDecodeHuff_8u
ippsEncodeHuffInitAlloc_8u
ippsHuffGetLenCodeTable_8u
ippsHuffLenCodeTablePack_8u
ippsEncodeHuff_8u
ippsEncodeHuffFinal_8u
----------------------------------------------

92||||1|I've tested (a lot of time ago) the universal version of pyramid functions but the functions listed above were faster. I use these functions in real time image processing of medical images where speed is very important.

ippiPyrDown_Gauss5x5_32f_C1R
ippiPyrUp_Gauss5x5_32f_C1R
----------------------------------------------

93|||||

ippsRijndael256DecryptCBC
----------------------------------------------

94||||1|Beginning a project in January, 2013 that requires the use of these functions. Deprecation will mean that we must freeze our IPP library at the last release that supports these functions.

ippsRijndael192Init
ippsRijndael256Init
ippsRijndael192EncryptCTR
----------------------------------------------

95||||1|we are on IPP6.1 and plans to update to 7.1.

ippStaticInit
ippsRandUniform_Direct_32f
ippsMul_64fc_I
ippsFFTInitAlloc_C_32fc
ippsFFTFree_C_32fc
ippsFFTInitAlloc_R_64f
ippsFFTFwd_RToPerm_64f_I
ippsFFTInv_PermToR_64f_I
ippsConj_64fc_I
ippsFFTFree_R_64f
ippiResizeSqrPixel_8u_C4R
----------------------------------------------

96|||||

ippsFFTFree_C_32fc
ippsConj_64fc_I
ippsFFTFree_R_64f
ippsFFTFwd_RToPerm_64f_I
ippsFFTInitAlloc_C_32fc
ippsFFTInitAlloc_R_64f
ippsFFTInv_PermToR_64f_I
ippsMul_64fc_I
ippsRandUniform_Direct_32f
----------------------------------------------

97||||1|A common operation in software in our industry is to manipulate large volumes of seismic data that represent a 3-dimensional (X, Y, Z) cube.  In memory, the 3 axes will be Major, Mid, and Minor (either XYZ, YZX, ZXY or YXZ).  For discussion, let's assume X Major, Y Mid, Z Minor.

ippsFlip_8u_I
----------------------------------------------

98||||1|ippsIIR_32f works incorrect with vector length = 2 on i3, Xeon L5410, but works fine on Pentium4, PentiumM

ippsIIROne_32f
----------------------------------------------

99||||1|I develop high performance DSP processing for wireless communications testing. I have two main customers that I develop for. 

ippsAdd_32s_ISfs
ippsAdd_32f_I
ippsAdd_64f_I
ippsAdd_32fc_I
ippsSub_32f_I
ippsSub_64f_I
ippsSub_32fc_I
ippsMul_32f_I
ippsMul_32fc_I
ippsDiv_32f_I
ippsDiv_32fc_I
ippsAddC_32s_ISfs
ippsAddC_32f_I
ippsAddC_64f_I
ippsAddC_32fc_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsMulC_32fc_I
ippsSqr_32f_I
ippsThreshold_GT_32s_I
ippsThreshold_GT_32f_I
ippsThreshold_GT_64f_I
ippsThreshold_LT_32s_I
ippsThreshold_LT_32f_I
ippsThreshold_LT_64f_I
ippsSwapBytes_16u_I
ippsFFTFree_C_32fc
ippsFFTInitAlloc_C_32fc
ippsFFTFwd_CToC_32fc_I
ippsFFTInv_CToC_32fc_I
----------------------------------------------

100||||1|12345

----------------------------------------------

101|||||12345

----------------------------------------------

102|||||

ippiZigzagInv8x8_16s_C1
----------------------------------------------

103|||||I found that this function conveted color is not bright (IPP　version  6.1.2.041). The color is somewhat grayed.

ippiYUV420ToBGR_8u_P3C3R
----------------------------------------------

104||||1|Hello,

ippiCrossCorrFull_Norm_8u32f_C1R
----------------------------------------------

105|||||

ippsMulC_32f_I
----------------------------------------------

106|||||

ippsFFTInitAlloc_R_32f
ippsWinHann_32f_I
ippsAdd_32f_I
----------------------------------------------

107||||1|

ippiAbs_32f_C1IR
ippiAdd_32f_C1IR
ippiAdd_32fc_C1IR
ippiAddC_32f_C1IR
ippiAnd_8u_C1IR
ippiAndC_8u_C1IR
ippiComputeThreshold_Otsu_8u_C1R
ippiConvFull_32f_C1R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiDCTFwdFree_32f
ippiDCTFwdInitAlloc_32f
ippiDCTInvFree_32f
ippiDCTInvInitAlloc_32f
ippiDilate3x3_8u_C1IR
ippiDistanceTransform_3x3_8u32f_C1R
ippiDivC_32f_C1IR
ippiErode3x3_8u_C1IR
ippiExp_32f_C1IR
ippiFFTFree_C_32fc
ippiFFTFree_R_32f
ippiLn_32f_C1IR
ippiMirror_32f_C1IR
ippiMomentFree_64f
ippiMomentInitAlloc_64f
ippiMul_32f_C1IR
ippiMul_32fc_C1R
ippiMulC_32f_C1IR
ippiMulC_32f_C3IR
ippiMulC_32fc_C1IR
ippiNot_8u_C1IR
ippiOr_8u_C1IR
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_8u_C1R
ippiSqr_32f_C1IR
ippiSqrt_32f_C1IR
ippiSub_32f_C1IR
ippiSubC_32f_C1IR
ippiThreshold_GTVal_32f_C1IR
ippiThreshold_GTVal_8u_C1IR
ippiThreshold_LT_32f_C1IR
ippiThreshold_LTVal_32f_C1IR
ippiThreshold_LTValGTVal_32f_C1IR
ippiThreshold_LTValGTVal_8u_C1IR
ippsAdd_32f_I
ippsAdd_32fc_I
ippsAdd_64f_I
ippsAddC_32f_I
ippsAddC_64f_I
ippsAndC_8u_I
ippsConj_32fc_I
ippsDiv_32f_I
ippsDivC_32f_I
ippsDivC_64f_I
ippsExp_32f_I
ippsExp_64f_I
ippsFIR64f_32f_I
ippsFIRFree64f_32f
ippsFIRInitAlloc64f_32f
ippsFlip_32f_I
ippsMul_64f_I
ippsMulC_32f_I
ippsMulC_32fc_I
ippsMulC_64f_I
ippsNot_8u_I
ippsRandUniform_Direct_16s
ippsSqr_32f_I
ippsSqr_64f_I
ippsSqrt_64f_I
ippsSub_32f_I
ippsSubC_32f_I
ippsSubCRev_32f_I
ippsSubCRev_64f_I
ippsVectorRamp_32f
ippsVectorRamp_64f
ippsXor_16u_I
----------------------------------------------

108||||1|

ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippsSwapBytes_64u_I
----------------------------------------------

109||||1|We use IPP primarily to optimize implememtations of various signal processing algorithms.  These typically involve both floating and fixed-point manipulation of large vectors, basic math operations, transforms, and filtering.

ippgWHT_32f
ippgWHTGetBufferSize_32f
ippiMomentFree_64f
ippiMomentInitAlloc_64f
ippsAbs_32f_I
ippsAbs_64f_I
ippsAdd_16s32s_I
ippsAdd_16sc_ISfs
ippsAdd_16s_I
ippsAdd_16s_ISfs
ippsAdd_32fc_I
ippsAdd_32f_I
ippsAdd_64fc_I
ippsAdd_64f_I
ippsAddC_16sc_ISfs
ippsAddC_16s_ISfs
ippsAddC_32fc_I
ippsAddC_32f_I
ippsAddC_64fc_I
ippsAddC_64f_I
ippsConj_16sc_I
ippsConj_32fc_I
ippsConj_64fc_I
ippsCrossCorr_16s64s
ippsDiv_32fc_I
ippsDivC_32f_I
ippsDivC_64fc_I
ippsDivC_64f_I
ippsDotProd_16s16sc32fc
ippsDotProd_16s16sc_Sfs
ippsDotProd_16sc32fc
ippsDotProd_16sc32sc_Sfs
ippsDotProd_16sc_Sfs
ippsDotProd_16s_Sfs
ippsFFTFree_C_16sc
ippsFFTFree_C_32fc
ippsFFTFree_C_64fc
ippsFFTFwd_CToC_16sc_Sfs
ippsFFTGetBufSize_C_16sc
ippsFFTInitAlloc_C_16sc
ippsFFTInitAlloc_C_32fc
ippsFFTInitAlloc_C_64fc
ippsFFTInv_CToC_16sc_Sfs
ippsFIR_32fc_I
ippsFIR64f_16s_ISfs
ippsFIR64fc_16sc_ISfs
ippsFIR_64fc_I
ippsFIRFree_32f
ippsFIRFree32f_16s
ippsFIRFree_32fc
ippsFIRFree32fc_16sc
ippsFIRFree64f_16s
ippsFIRFree_64fc
ippsFIRFree64fc_16sc
ippsFIRInitAlloc_32f
ippsFIRInitAlloc32f_16s
ippsFIRInitAlloc_32fc
ippsFIRInitAlloc32fc_16sc
ippsFIRInitAlloc64f_16s
ippsFIRInitAlloc_64fc
ippsFIRInitAlloc64fc_16sc
ippsFIRMRInitAlloc_64fc
ippsFIRMRInitAlloc64fc_16sc
ippsFIROne_32f
ippsFlip_32fc_I
ippsFlip_32f_I
ippsFlip_64fc_I
ippsFlip_64f_I
ippsHilbert_16s16sc_Sfs
ippsHilbertFree_16s16sc
ippsHilbertInitAlloc_16s16sc
ippsIIRFree32sc_16sc
ippsInterleave_16s
ippsLShiftC_16s_I
ippsLShiftC_32s_I
ippsMagSquared_32fc64f
ippsMul_16s32s_Sfs
ippsMul_16sc_ISfs
ippsMul_16s_ISfs
ippsMul_32fc_I
ippsMul_32f_I
ippsMul_32sc_ISfs
ippsMul_32s_ISfs
ippsMul_64fc_I
ippsMul_64f_I
ippsMulC_16sc_ISfs
ippsMulC_16s_ISfs
ippsMulC_32fc_I
ippsMulC_32f_I
ippsMulC_32sc_ISfs
ippsMulC_32s_ISfs
ippsMulC_64fc_I
ippsMulC_64f_I
ippsPhase_16sc_Sfs
ippsPhase_32sc_Sfs
ippsPolarToCart_16sc
ippsPowerSpectr_16sc32f
ippsRShiftC_16s_I
ippsSqr_32fc_I
ippsSqr_32f_I
ippsSub_32f_I
ippsSub_64fc_I
ippsSub_64f_I
ippsSubC_16sc_ISfs
ippsSubC_16s_ISfs
ippsSubC_32fc_I
ippsSubC_32f_I
ippsSubC_64fc_I
ippsSubC_64f_I
ippsSum_16sc32sc_Sfs
ippsSwapBytes_16u_I
ippStaticInit
ippsThreshold_32f_I
ippsThreshold_GT_32f_I
ippsThreshold_GT_64f_I
ippsThreshold_LT_32f_I
ippsThreshold_LT_64f_I
ippsTone_Direct_16s
ippsTone_Direct_16sc
ippsTone_Direct_32fc
ippsWinBartlett_64fc_I
ippsWinBlackmanOpt_64fc_I
ippsWinHamming_64fc_I
ippsWinHann_64fc_I
ippsWinKaiser_64fc_I
ippsXor_8u_I
ippsXorC_8u_I
----------------------------------------------

110||||1|In my code I have replaced other deprecated inline functions with the equivalent not inlines (passing the same pointer for input/output. So far so good.

ippsRandGaussInitAlloc_32f
ippsRandGaussFree_32f
ippsTone_Direct_32fc
ippsFIRInitAlloc_32fc
ippsFIRFree_32fc
----------------------------------------------

111||||1|Looking for an alternative at least.  The information in the deprecation information:

ippsTone_Direct_32fc
----------------------------------------------

112|||||

ippiSwapChannels_8u_C3IR
ippiColorTwist32f_8u_C3IR
ippiColorTwist32f_8u_AC4IR
ippiColorTwist32f_16u_C3IR
ippiThreshold_GT_16u_C1IR
ippiColorTwist32f_8u_IP3R
ippiRShiftC_16u_C1IR
ippiLShiftC_16u_C1IR
ippiLShiftC_32s_C1IR
ippiAddC_8u_C1IRSfs
ippiSubC_8u_C1IRSfs
ippiAddC_8u_C4IRSfs
ippiSubC_8u_C4IRSfs
ippiAddC_16u_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiAddC_16u_C3IRSfs
ippiThreshold_GT_16u_C3IR
ippiSubC_16u_C3IRSfs
ippiThreshold_GT_8u_C1IR
ippiMulC_8u_C4IRSfs
ippiMulC_16u_C4IRSfs
ippiAddC_16u_C4IRSfs
ippiSubC_16u_C4IRSfs
ippiMulC_8u_C1IRSfs
ippiMulC_16u_C1IRSfs
ippiSubC_8u_C3IRSfs
ippiMulC_8u_C3IRSfs
ippiAddC_8u_C3IRSfs
ippiSubC_8u_AC4IRSfs
ippiMulC_8u_AC4IRSfs
ippiAddC_8u_AC4IRSfs
ippiMulC_16u_C3IRSfs
ippiGammaFwd_8u_C3IR
ippiGammaFwd_8u_AC4IR
ippiLShiftC_16u_C3IR
ippiGammaFwd_16u_C3IR
ippiRShiftC_16u_C3IR
ippiGammaFwd_8u_IP3R
ippiLUT_8u_C1IR
ippiLUT_Linear_8u_C1IR
ippiLUT_Cubic_8u_C1IR
ippiLUT_16s_C1IR
ippiLUT_Linear_16s_C1IR
ippiLUT_Cubic_16s_C1IR
ippiLUT_8u_AC4IR
ippiLUT_Linear_8u_AC4IR
ippiLUT_Cubic_8u_AC4IR
ippiLUT_16s_C3IR
ippiLUT_Linear_16s_C3IR
ippiLUT_Cubic_16s_C3IR
ippiLUT_8u_C3IR
ippiLUT_Linear_8u_C3IR
ippiLUT_Cubic_8u_C3IR
ippiMirror_8u_C4IR
ippiMirror_16u_C4IR
ippiMirror_8u_C1IR
ippiMirror_16u_C1IR
ippiMirror_8u_AC4IR
ippiMirror_8u_C3IR
ippiMirror_16u_C3IR
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_8u_P3R
ippiResizeYUV422_8u_C2R
ippStaticInit
----------------------------------------------

113|||||

ippiColorTwist32f_8u_C3IR
ippiColorTwist32f_8u_AC4IR
ippiColorTwist32f_16u_C3IR
ippiThreshold_GT_16u_C1IR
ippiColorTwist32f_8u_IP3R
ippiSwapChannels_8u_C3IR
ippiRShiftC_16u_C1IR
ippiLShiftC_16u_C1IR
ippiLShiftC_32s_C1IR
ippiAddC_8u_C1IRSfs
ippiSubC_8u_C1IRSfs
ippiAddC_8u_C4IRSfs
ippiSubC_8u_C4IRSfs
ippiAddC_16u_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiAddC_16u_C3IRSfs
ippiThreshold_GT_16u_C3IR
ippiSubC_16u_C3IRSfs
ippiThreshold_GT_8u_C1IR
ippiMulC_8u_C4IRSfs
ippiMulC_16u_C4IRSfs
ippiAddC_16u_C4IRSfs
ippiSubC_16u_C4IRSfs
ippiMulC_8u_C1IRSfs
ippiMulC_16u_C1IRSfs
ippiSubC_8u_C3IRSfs
ippiMulC_8u_C3IRSfs
ippiAddC_8u_C3IRSfs
ippiSubC_8u_AC4IRSfs
ippiMulC_8u_AC4IRSfs
ippiAddC_8u_AC4IRSfs
ippiMulC_16u_C3IRSfs
ippiGammaFwd_8u_C3IR
ippiGammaFwd_8u_AC4IR
ippiLShiftC_16u_C3IR
ippiGammaFwd_16u_C3IR
ippiRShiftC_16u_C3IR
ippiGammaFwd_8u_IP3R
ippiLUT_8u_C1IR
ippiLUT_Linear_8u_C1IR
ippiLUT_Cubic_8u_C1IR
ippiLUT_16s_C1IR
ippiLUT_Linear_16s_C1IR
ippiLUT_Cubic_16s_C1IR
ippiLUT_8u_AC4IR
ippiLUT_Linear_8u_AC4IR
ippiLUT_Cubic_8u_AC4IR
ippiLUT_16s_C3IR
ippiLUT_Linear_16s_C3IR
ippiLUT_Cubic_16s_C3IR
ippiLUT_8u_C3IR
ippiLUT_Linear_8u_C3IR
ippiLUT_Cubic_8u_C3IR
ippiMirror_8u_C4IR
ippiMirror_16u_C4IR
ippiMirror_8u_C1IR
ippiMirror_16u_C1IR
ippiMirror_8u_AC4IR
ippiMirror_8u_C3IR
ippiMirror_16u_C3IR
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_8u_P3R
ippiResizeYUV422_8u_C2R
ippStaticInit
----------------------------------------------

114||||1|F8Ybgo  

----------------------------------------------

115||||1|You can remove in-place flavors when there is a not-in-place version that provides the same functionality.

ippiSwapChannels_8u_C4IR
----------------------------------------------

116|||||Moving foward, it is essential that we get to se the 3D functionality from IPP. 

----------------------------------------------

117||||1|Functions are twice as fast as calling Goertz twice. They are used for speeding up optimization methods and part of very critical part of our applications. We also disagree to simply remove all in-place functions, unless the source and destination buffer can be one and the same. This automatically leads to bigger memory consumption and extra work. We use 100+ of _I functions. 

ippsGoertzTwo_32fc
ippsGoertzTwo_64fc
ippsGoertzTwo_32f
ippsGoertzTwo_64f
----------------------------------------------

118|||||

ippsFIR_Direct_32f_I
----------------------------------------------

119||||1|ippiComputeThreshold_Otsu function has been marked as deprecated. We heavily rely on this function. Is there an alternative? If not, we ask that you please consider keeping this function.

ippiComputeThreshold_Otsu_8u_C1R
----------------------------------------------

120|||||

----------------------------------------------

121|||||

----------------------------------------------

122|||||The function MorphReconstructGetBufferSize()  is required to calculate the buffer size used in morphological reconstruction methods. The manual references this function in the reconstruction functions to calculate buffer size. It's not clear how to get the size if this method is deprecated!

ippiMorphReconstructGetBufferSize_8u_C1
----------------------------------------------

123|||||

ippiResizeYUV420GetBufSize
----------------------------------------------

124||||1|

ippsConj_32fc_I
----------------------------------------------

125|||||Please, provide a library with all deprecated functions for a while...

ippsWinBlackmanStd_32f_I
----------------------------------------------

126||||1|

ippiHuffmanTableFree_32s
ippiReconstructDCTBlockIntra_MPEG2_32s
ippiReconstructDCTBlock_MPEG2_32s
ippiMC4x8_8u_C1
ippiMC4x4B_8u_C1
----------------------------------------------

127||||1|How and which new functions use to replace these two functions?

ippiResizeYUV420GetBufSize
ippiResizeYUV420_8u_P2R
----------------------------------------------

128|||||to whom it may concern,

ippiConvValid_32f_C1R
ippiConvValid_32f_C3R
----------------------------------------------

129||||1|I am looking to retain mentioned APIs as they provide measurable performance improvements when memory access is the slowest part of processing.

ippsFFTFwd_CToC_32fc_I
ippsConj_32fc_I
ippsMul_32fc_I
ippsFFTInv_CToC_32fc_I
ippsMulC_32f_I
ippsFFTFwd_CToC_64fc_I
ippsConj_64fc_I
ippsMul_64fc_I
ippsFFTInv_CToC_64fc_I
ippsMulC_64f_I
----------------------------------------------

130|||||I found in post http://software.intel.com/en-us/forums/topic/344312 that non-in-place functions can be used with src==dst. 

ippiDivC_32f_C1IR
----------------------------------------------

131||||1|The non-inline versions don't work with the same input and output data arrays.  A temporary array is required for the output, which must then be copied back to the input array.

ippsFIR_32f_I
ippsFIR_32fc_I
----------------------------------------------

132||||1|

ippsRijndael256GetSize
ippsRijndael256Init
ippsRijndael256EncryptCTR
ippsRijndael256DecryptCTR
ippsECCPGetOrderBitSize
ippsECCPGet
----------------------------------------------

133|||||

ippsVectorRamp_8u
ippsVectorRamp_16u
ippsVectorRamp_32f
ippsSqrt_8u_ISfs
ippsSqr_8u_ISfs
ippsSqrt_16u_ISfs
ippsSqr_16u_ISfs
ippsSqrt_32f_I
ippsSqr_32f_I
ippsAbs_32f_I
ippsAddC_8u_ISfs
ippsSubC_8u_ISfs
ippsMulC_8u_ISfs
ippsDivC_8u_ISfs
ippsAddC_16u_ISfs
ippsSubC_16u_ISfs
ippsMulC_16u_ISfs
ippsDivC_16u_ISfs
ippsAddC_32f_I
ippsSubC_32f_I
ippsMulC_32f_I
ippsDivC_32f_I
ippsAdd_8u_ISfs
ippsSub_8u_ISfs
ippsMul_8u_ISfs
ippsDiv_8u_ISfs
ippsAdd_16u_ISfs
ippsSub_16u_ISfs
ippsMul_16u_ISfs
ippsDiv_16u_ISfs
ippsAdd_32f_I
ippsSub_32f_I
ippsMul_32f_I
ippsDiv_32f_I
ippsThreshold_LT_32f_I
ippsThreshold_GT_32f_I
ippiSqrt_8u_C1IRSfs
ippiSqr_8u_C1IRSfs
ippiLn_8u_C1IRSfs
ippiExp_8u_C1IRSfs
ippiSqrt_32f_C1IR
ippiSqr_32f_C1IR
ippiLn_32f_C1IR
ippiExp_32f_C1IR
ippiAddC_8u_C1IRSfs
ippiSubC_8u_C1IRSfs
ippiMulC_8u_C1IRSfs
ippiDivC_8u_C1IRSfs
ippiAddC_32f_C1IR
ippiSubC_32f_C1IR
ippiMulC_32f_C1IR
ippiDivC_32f_C1IR
ippiAdd_8u_C1IRSfs
ippiSub_8u_C1IRSfs
ippiMul_8u_C1IRSfs
ippiDiv_8u_C1IRSfs
ippiAdd_32f_C1IR
ippiSub_32f_C1IR
ippiMul_32f_C1IR
ippiDiv_32f_C1IR
ippiThreshold_LT_8u_C1IR
ippiThreshold_GT_8u_C1IR
ippiThreshold_LT_32f_C1IR
ippiThreshold_GT_32f_C1IR
----------------------------------------------

134|||||

ippsInterleave_16s
ippsMulC_64f_I
ippsDivC_64f_I
ippsMul_64f_I
ippsAddC_64f_I
ippsSqr_64f_I
ippsSqrt_64f_I
ippsSub_64f_I
ippsAbs_64f_I
ippsDiv_64f_I
ippsExp_64f_I
ippsLn_64f_I
ippsIIRInitAlloc_32f
ippsIIRInitAlloc_64f
----------------------------------------------

135|||||

ippiCopyReplicateBorder_32f_C1IR
ippiCopyReplicateBorder_8u_C1IR
ippiCopyReplicateBorder_8u_C3IR
ippiCopyReplicateBorder_8u_C4IR
ippiCopyReplicateBorder_16u_C1IR
ippiCopyReplicateBorder_16u_C3IR
ippiCopyReplicateBorder_16u_C4IR
ippiCopyReplicateBorder_32f_C3IR
ippiCopyReplicateBorder_32f_C4IR
ippiRGBToRGB565_8u16u_C3R
ippiBGRToBGR565_8u16u_C3R
ippiRGB565ToRGB_16u8u_C3R
ippiBGR565ToBGR_16u8u_C3R
ippiConvert_8u16u_AC4R
ippiConvert_8u32f_AC4R
ippiConvert_16u32f_AC4R
ippiConvert_16u8u_AC4R
ippiConvert_32f8u_AC4R
ippiConvert_32f16u_AC4R
ippiTranspose_32f_C1IR
ippiSwapChannels_8u_C3IR
ippiSwapChannels_8u_C4IR
ippiAbs_32f_C1IR
ippiGammaFwd_32f_C3IR
ippiGammaFwd_16u_C3IR
ippiGammaFwd_8u_C3IR
ippiGammaFwd_16u_AC4IR
ippiGammaFwd_8u_AC4IR
ippiGammaInv_32f_C3IR
ippiGammaInv_8u_C3IR
ippiGammaInv_16u_C3IR
ippiGammaInv_8u_AC4IR
ippiGammaInv_16u_AC4IR
ippiColorTwist_32f_C3IR
ippiLUT_Cubic_16u_C3IR
ippiLUT_Cubic_32f_C1IR
ippiLUT_8u_C1IR
ippiLUT_16u_C1IR
ippiLUT_16u_C3IR
ippiLUT_8u_C3IR
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_16u_C4R
ippiResizeSqrPixel_32f_C3R
ippiResizeSqrPixel_32f_C1R
ippiThreshold_32f_C1IR
ippiThreshold_Val_32f_C1IR
ippiDFTFree_R_32f
ippiDFTInv_PackToR_32f_C1IR
ippiMulPack_32f_C1IR
ippiDFTFwd_RToPack_32f_C1IR
ippiDFTInitAlloc_R_32f
ippiFFTFree_C_32fc
ippiFFTFwd_CToC_32fc_C1IR
ippiFFTInv_CToC_32fc_C1IR
ippiAdd_8u_AC4RSfs
ippiAddC_8u_C1IRSfs
ippiAdd_16u_C3IRSfs
ippiAdd_16u_AC4RSfs
ippiAddC_16u_C1IRSfs
ippiAddC_16s_C1IRSfs
ippiAdd_32f_AC4R
ippiAdd_32f_C3IR
ippiAdd_32f_C1IR
ippiAddC_32f_C3IR
ippiAddC_32f_C1IR
ippiSub_16u_C3IRSfs
ippiSub_32f_C1IR
ippiSub_32f_C3IR
ippiSubC_16s_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiSubC_32f_C1IR
ippiDiv_32f_C3IR
ippiDiv_32f_C1IR
ippiDivC_8u_C3IRSfs
ippiDivC_16u_C3IRSfs
ippiDivC_32f_C1IR
ippiDivC_32f_C3IR
ippiMul_8u_C3IRSfs
ippiMul_8u_C1IRSfs
ippiMul_16u_C3IRSfs
ippiMul_16u_C1IRSfs
ippiMul_32f_C1IR
ippiMul_32fc_C1R
ippiMul_32fc_C1IR
ippiMul_32f_C3IR
ippiMulC_8u_C3IRSfs
ippiMulC_16u_C3IRSfs
ippiMulC_32f_C3IR
ippiMulC_32f_C1IR
ippsMulC_32f_I
ippiLn_32f_C1IR
ippiCrossCorrSame_Norm_8u32f_C1R
ippiCrossCorrSame_NormLevel_8u32f_C1R
ippiSqrDistanceSame_Norm_8u32f_C1R
ippiSqr_32f_C1IR
ippiSqr_32f_C3IR
ippiSqrt_32f_C1IR
ippiExp_32f_C1IR
ippiExp_32f_C3IR
ippiDistanceTransform_3x3_8u32f_C1R
ippiDistanceTransform_3x3_8u_C1R
ippiDistanceTransform_5x5_8u32f_C1R
ippiDistanceTransform_5x5_8u_C1R
ippiMorphologyInitAlloc_8u_C1R
ippiMorphologyInitAlloc_8u_C3R
ippiMorphologyInitAlloc_8u_C4R
ippiMorphologyInitAlloc_32f_C1R
ippiMorphologyInitAlloc_32f_C3R
ippiMorphologyInitAlloc_32f_C4R
ippiAnd_8u_AC4R
ippiAnd_16u_AC4R
ippiOr_16u_AC4R
ippiXorC_8u_C3IR
ippiNot_8u_C1IR
ippiFilterBox_8u_C1IR
ippiFilterBox_8u_C3IR
ippiFilterBox_8u_C4IR
ippiFilterBox_16u_C1IR
ippiFilterBox_16u_C3IR
ippiFilterBox_16u_C4IR
ippiFilterBox_32f_C1IR
ippiFilterBox_32f_C3IR
ippiFilterBox_32f_C4IR
ippiDistanceTransform_3x3_8u16u_C1R
ippiDistanceTransform_5x5_8u16u_C1R
ippiMirror_8u_C1IR
ippiMirror_8u_C3IR
ippiMirror_8u_C4IR
ippiMirror_8u_AC4IR
ippiMirror_16u_C1IR
ippiMirror_16u_C3IR
ippiMirror_16u_AC4IR
ippiMirror_16u_C4IR
ippiAddRandGauss_Direct_8u_C3IR
ippiAddRandGauss_Direct_8u_C1IR
ippiAddRandGauss_Direct_16u_C1IR
ippiPyramidFree
ippiPyramidLayerUpFree_32f_C3R
ippiPyramidLayerDownFree_32f_C3R
ippiPyramidLayerUpInitAlloc_32f_C3R
ippiPyramidLayerDownInitAlloc_32f_C3R
ippiPyramidInitAlloc
ippiPyramidLayerUpFree_32f_C1R
ippiPyramidLayerDownFree_32f_C1R
ippiPyramidLayerUpInitAlloc_32f_C1R
ippiPyramidLayerDownInitAlloc_32f_C1R
----------------------------------------------

136||||1|

ippsDFTFree_R_64f
ippsFFTFree_R_64f
ippsFFTInitAlloc_R_64f
ippsDFTFree_C_32fc
ippsFFTFree_C_32fc
ippsFFTInitAlloc_C_32fc
ippsDFTFree_C_64fc
ippsFFTFree_C_64fc
ippsFFTInitAlloc_C_64fc
ippsFFTFwd_RToCCS_64f_I
ippsFIRFree_64f
ippsFIRInitAlloc_64f
ippsIIRFree_64f
ippsIIR_64f_I
ippsIIRInitAlloc_64f
ippsMulC_64f_I
ippsFIR_64f_I
ippsSqr_64f_I
ippsSqrt_64f_I
ippsAdd_64f_I
ippsMul_64f_I
ippsThreshold_LT_64f_I
ippsConj_64fc_I
ippsMul_64fc_I
ippsFFTInitAlloc_R_32f
ippsFFTFwd_RToPerm_32f_I
ippsFFTFwd_RToPerm_64f_I
ippsFFTFree_R_32f
ippsFFTInv_PermToR_32f_I
ippsFFTInv_PermToR_64f_I
ippsMulPerm_32f_I
ippsMulPerm_64f_I
ippsAdd_32f_I
ippsSubC_64f_I
ippsHilbertFree_32f32fc
ippsHilbertInitAlloc_32f32fc
ippsHilbert_32f32fc
----------------------------------------------

137|||||For years, Intel has been encouraging developers using IPP to further optimize their applications by using in-place IPP functions instead of similar not-in-place IPP functions.  As such, we have implemented our algorithms to intentionally use as many in-place IPP functions as possible.  Now, you've deprecated nearly all in-place functions.  If we were to accommodate this, a significant effort would have to be made to modify hundreds of algorithm implementations.  Moreover, the end result would be slower implementations.  Please do not deprecate the in-place functions, as it does not make sense from a performance perspective, which is why we use IPP.

ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippsSwapBytes_64u_I
ippsAnd_8u_I
ippsAnd_16u_I
ippsAnd_32u_I
ippsAndC_8u_I
ippsAndC_16u_I
ippsAndC_32u_I
ippsMul_8u_ISfs
ippsMul_16u_ISfs
ippsMul_16s_I
ippsMul_32s_ISfs
ippsMul_32f_I
ippsMul_64f_I
ippsMulC_8u_ISfs
ippsMulC_16u_ISfs
ippsMulC_32s_ISfs
ippsMulC_32f_I
ippsMulC_64f_I
ippsDiv_8u_ISfs
ippsDiv_16u_ISfs
ippsDiv_16s_ISfs
ippsDiv_32s_ISfs
ippsDiv_32f_I
ippsDiv_64f_I
ippsDivC_8u_ISfs
ippsDivC_16u_ISfs
ippsDivC_16s_ISfs
ippsDivC_32f_I
ippsDivC_64f_I
ippsDivCRev_16u_I
ippsDivCRev_32f_I
ippsAdd_8u_ISfs
ippsAdd_16u_ISfs
ippsAdd_16s_I
ippsAdd_32s_ISfs
ippsAdd_32f_I
ippsAdd_64f_I
ippsAddC_8u_ISfs
ippsAddC_16u_ISfs
ippsAddC_32s_ISfs
ippsAddC_32f_I
ippsAddC_64f_I
ippsSub_8u_ISfs
ippsSub_16u_ISfs
ippsSub_16s_I
ippsSub_32s_ISfs
ippsSub_32f_I
ippsSub_64f_I
ippsSubC_8u_ISfs
ippsSubC_16u_ISfs
ippsSubC_32s_ISfs
ippsSubC_32f_I
ippsSubC_64f_I
ippsSubCRev_8u_ISfs
ippsSubCRev_16u_ISfs
ippsSubCRev_16s_ISfs
ippsSubCRev_32s_ISfs
ippsSubCRev_32f_I
ippsSubCRev_64f_I
ippsSqr_8u_ISfs
ippsSqr_16u_ISfs
ippsSqr_16s_ISfs
ippsSqr_32f_I
ippsSqr_64f_I
ippsSqrt_8u_ISfs
ippsSqrt_16u_ISfs
ippsSqrt_16s_ISfs
ippsSqrt_32f_I
ippsSqrt_64f_I
ippsAbs_16s_I
ippsAbs_32f_I
ippsAbs_64f_I
ippsThreshold_LT_16s_I
ippsThreshold_LT_32s_I
ippsThreshold_LT_32f_I
ippsThreshold_LT_64f_I
ippsThreshold_GT_16s_I
ippsThreshold_GT_32s_I
ippsThreshold_GT_32f_I
ippsThreshold_GT_64f_I
ippsThreshold_LTVal_16s_I
ippsThreshold_LTVal_32f_I
ippsThreshold_LTVal_64f_I
ippsThreshold_GTVal_16s_I
ippsThreshold_GTVal_32f_I
ippsThreshold_GTVal_64f_I
ippsLShiftC_8u_I
ippsLShiftC_16u_I
ippsLShiftC_16s_I
ippsLShiftC_32s_I
ippsRShiftC_8u_I
ippsRShiftC_16u_I
ippsRShiftC_16s_I
ippsRShiftC_32s_I
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiCrossCorrValid_NormLevel_16u32f_C1R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C3R
ippiCrossCorrValid_NormLevel_16u32f_C3R
ippiCrossCorrValid_NormLevel_32f_C3R
ippiCrossCorrValid_NormLevel_8u32f_C4R
ippiCrossCorrValid_NormLevel_16u32f_C4R
ippiCrossCorrValid_NormLevel_32f_C4R
ippiSwapChannels_8u_C3IR
ippiMul_8u_C1IRSfs
ippiMul_16u_C1IRSfs
ippiMul_16s_C1IRSfs
ippiMul_32f_C1IR
ippiMul_8u_C3IRSfs
ippiMul_16u_C3IRSfs
ippiMul_16s_C3IRSfs
ippiMul_32f_C3IR
ippiMul_8u_C4IRSfs
ippiMul_16u_C4IRSfs
ippiMul_16s_C4IRSfs
ippiMul_32f_C4IR
ippiMul_8u_AC4IRSfs
ippiMul_16u_AC4IRSfs
ippiMul_16s_AC4IRSfs
ippiMul_32f_AC4IR
ippiMulC_8u_C1IRSfs
ippiMulC_16u_C1IRSfs
ippiMulC_16s_C1IRSfs
ippiMulC_32f_C1IR
ippiMulC_8u_C3IRSfs
ippiMulC_16u_C3IRSfs
ippiMulC_16s_C3IRSfs
ippiMulC_32f_C3IR
ippiMulC_8u_C4IRSfs
ippiMulC_16u_C4IRSfs
ippiMulC_16s_C4IRSfs
ippiMulC_32f_C4IR
ippiDiv_8u_C1IRSfs
ippiDiv_16u_C1IRSfs
ippiDiv_16s_C1IRSfs
ippiDiv_32f_C1IR
ippiDiv_8u_C3IRSfs
ippiDiv_16u_C3IRSfs
ippiDiv_16s_C3IRSfs
ippiDiv_32f_C3IR
ippiDiv_8u_C4IRSfs
ippiDiv_16u_C4IRSfs
ippiDiv_16s_C4IRSfs
ippiDiv_32f_C4IR
ippiDiv_8u_AC4IRSfs
ippiDiv_16u_AC4IRSfs
ippiDiv_16s_AC4IRSfs
ippiDiv_32f_AC4IR
ippiDivC_8u_C1IRSfs
ippiDivC_16u_C1IRSfs
ippiDivC_16s_C1IRSfs
ippiDivC_32f_C1IR
ippiDivC_8u_C3IRSfs
ippiDivC_16u_C3IRSfs
ippiDivC_16s_C3IRSfs
ippiDivC_32f_C3IR
ippiDivC_8u_C4IRSfs
ippiDivC_16u_C4IRSfs
ippiDivC_16s_C4IRSfs
ippiDivC_32f_C4IR
ippiAdd_8u_C1IRSfs
ippiAdd_16u_C1IRSfs
ippiAdd_16s_C1IRSfs
ippiAdd_32f_C1IR
ippiAdd_8u_C3IRSfs
ippiAdd_16u_C3IRSfs
ippiAdd_16s_C3IRSfs
ippiAdd_32f_C3IR
ippiAdd_8u_C4IRSfs
ippiAdd_16u_C4IRSfs
ippiAdd_16s_C4IRSfs
ippiAdd_32f_C4IR
ippiAddC_8u_C1IRSfs
ippiAddC_16u_C1IRSfs
ippiAddC_16s_C1IRSfs
ippiAddC_32f_C1IR
ippiAddC_8u_C3IRSfs
ippiAddC_16u_C3IRSfs
ippiAddC_16s_C3IRSfs
ippiAddC_32f_C3IR
ippiAddC_8u_C4IRSfs
ippiAddC_16u_C4IRSfs
ippiAddC_16s_C4IRSfs
ippiAddC_32f_C4IR
ippiSub_8u_C1IRSfs
ippiSub_16u_C1IRSfs
ippiSub_16s_C1IRSfs
ippiSub_32f_C1IR
ippiSub_8u_C3IRSfs
ippiSub_16u_C3IRSfs
ippiSub_16s_C3IRSfs
ippiSub_32f_C3IR
ippiSub_8u_C4IRSfs
ippiSub_16u_C4IRSfs
ippiSub_16s_C4IRSfs
ippiSub_32f_C4IR
ippiSub_8u_AC4IRSfs
ippiSub_16u_AC4IRSfs
ippiSub_16s_AC4IRSfs
ippiSub_32f_AC4IR
ippiSubC_8u_C1IRSfs
ippiSubC_16u_C1IRSfs
ippiSubC_16s_C1IRSfs
ippiSubC_32f_C1IR
ippiSubC_8u_C3IRSfs
ippiSubC_16u_C3IRSfs
ippiSubC_16s_C3IRSfs
ippiSubC_32f_C3IR
ippiSubC_8u_C4IRSfs
ippiSubC_16u_C4IRSfs
ippiSubC_16s_C4IRSfs
ippiSubC_32f_C4IR
ippiSqr_8u_C1IRSfs
ippiSqr_16u_C1IRSfs
ippiSqr_16s_C1IRSfs
ippiSqr_32f_C1IR
ippiSqr_8u_C3IRSfs
ippiSqr_16u_C3IRSfs
ippiSqr_16s_C3IRSfs
ippiSqr_32f_C3IR
ippiSqr_8u_C4IRSfs
ippiSqr_16u_C4IRSfs
ippiSqr_16s_C4IRSfs
ippiSqr_32f_C4IR
ippiSqr_8u_AC4IRSfs
ippiSqr_16u_AC4IRSfs
ippiSqr_16s_AC4IRSfs
ippiSqr_32f_AC4IR
ippiSqrt_8u_C1IRSfs
ippiSqrt_16u_C1IRSfs
ippiSqrt_16s_C1IRSfs
ippiSqrt_32f_C1IR
ippiSqrt_8u_C3IRSfs
ippiSqrt_16u_C3IRSfs
ippiSqrt_16s_C3IRSfs
ippiSqrt_32f_C3IR
ippiSqrt_8u_AC4IRSfs
ippiSqrt_16u_AC4IRSfs
ippiSqrt_16s_AC4IRSfs
ippiSqrt_32f_AC4IR
ippiThreshold_LT_8u_C1IR
ippiThreshold_LT_16u_C1IR
ippiThreshold_LT_16s_C1IR
ippiThreshold_LT_32f_C1IR
ippiThreshold_LT_8u_C3IR
ippiThreshold_LT_16u_C3IR
ippiThreshold_LT_16s_C3IR
ippiThreshold_LT_32f_C3IR
ippiThreshold_LT_8u_AC4IR
ippiThreshold_LT_16u_AC4IR
ippiThreshold_LT_16s_AC4IR
ippiThreshold_LT_32f_AC4IR
ippiThreshold_GT_8u_C1IR
ippiThreshold_GT_16u_C1IR
ippiThreshold_GT_16s_C1IR
ippiThreshold_GT_32f_C1IR
ippiThreshold_GT_8u_C3IR
ippiThreshold_GT_16u_C3IR
ippiThreshold_GT_16s_C3IR
ippiThreshold_GT_32f_C3IR
ippiThreshold_GT_8u_AC4IR
ippiThreshold_GT_16u_AC4IR
ippiThreshold_GT_16s_AC4IR
ippiThreshold_GT_32f_AC4IR
ippiThreshold_LTVal_8u_C1IR
ippiThreshold_LTVal_16u_C1IR
ippiThreshold_LTVal_16s_C1IR
ippiThreshold_LTVal_32f_C1IR
ippiThreshold_LTVal_8u_C3IR
ippiThreshold_LTVal_16u_C3IR
ippiThreshold_LTVal_16s_C3IR
ippiThreshold_LTVal_32f_C3IR
ippiThreshold_LTVal_8u_C4IR
ippiThreshold_LTVal_16u_C4IR
ippiThreshold_LTVal_16s_C4IR
ippiThreshold_LTVal_32f_C4IR
ippiThreshold_LTVal_8u_AC4IR
ippiThreshold_LTVal_16u_AC4IR
ippiThreshold_LTVal_16s_AC4IR
ippiThreshold_LTVal_32f_AC4IR
ippiThreshold_GTVal_8u_C1IR
ippiThreshold_GTVal_16u_C1IR
ippiThreshold_GTVal_16s_C1IR
ippiThreshold_GTVal_32f_C1IR
ippiThreshold_GTVal_8u_C3IR
ippiThreshold_GTVal_16u_C3IR
ippiThreshold_GTVal_16s_C3IR
ippiThreshold_GTVal_32f_C3IR
ippiThreshold_GTVal_8u_C4IR
ippiThreshold_GTVal_16u_C4IR
ippiThreshold_GTVal_16s_C4IR
ippiThreshold_GTVal_32f_C4IR
ippiThreshold_GTVal_8u_AC4IR
ippiThreshold_GTVal_16u_AC4IR
ippiThreshold_GTVal_16s_AC4IR
ippiThreshold_GTVal_32f_AC4IR
----------------------------------------------

138|||||

ippiConvValid_16s_C1R
ippiConvValid_32f_C1R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiComputeThreshold_Otsu_8u_C1R
----------------------------------------------

139|||||

ippiResizeSqrPixel_8u_C4R
----------------------------------------------

140||||1|I really need the inplace versions of functions replicate border and wrap border. Especially, if it is previously necessary to 1. convert an array from 8bit to 32bit floating point and 2. to add the border regions. I don't understand why it should be better to add a 3. step where require an additional 32bit floating point temporary array to copy the converted data to array including the wrapped or replicated border.

ippiCopyWrapBorder_32f_C1IR
ippiWTFwdFree_32f_C1R
ippiWTFwdFree_32f_C3R
ippiWTInvFree_32f_C1R
ippiWTInvFree_32f_C3R
ippiCopyReplicateBorder_8u_C1IR
ippiCopyReplicateBorder_32f_C1IR
ippiCopyReplicateBorder_32s_C1IR
----------------------------------------------

141|||||

ippsRandGaussFree_16s
ippsRandGaussInitAlloc_32f
ippsRandUniformFree_32f
ippsRandUniformInitAlloc_8u
ippsRandUniformInitAlloc_16s
ippsTone_Direct_32f
ippsTone_Direct_32fc
ippsTone_Direct_16s
ippsTone_Direct_16sc
----------------------------------------------

142||||1|Warning	4	warning C4996: 'ippsFFTFree_R_32f': is deprecated. This function is obsolete and will be removed in one of the future IPP releases. Internal memory allocation will not be supported - use Get<Buffer>Size and Init pair for this functionality. Use the following link for details: http://software.intel.com/en-us/articles/intel-ipp-71-deprecated-features/	

ippsFFTInitAlloc_R_32f
ippsFFTFree_R_32f
----------------------------------------------

143|||||

ippiAddRandUniform_Direct_8u_C1IR
ippiAddRandUniform_Direct_16s_C1IR
ippiAddRandUniform_Direct_32f_C1IR
ippiAddRandGauss_Direct_8u_C1IR
ippiAddRandGauss_Direct_16s_C1IR
ippiAddRandGauss_Direct_32f_C1IR
----------------------------------------------

144||||1|

ippiAbs_32f_C1IR
ippiAbs_32f_C3IR
ippiAddC_16u_C1IRSfs
ippiAddC_16u_C3IRSfs
ippiAddC_8u_C1IRSfs
ippiAddC_8u_C3IRSfs
ippiAnd_16u_C1IR
ippiAnd_16u_C3IR
ippiAnd_8u_C1IR
ippiAnd_8u_C3IR
ippiColorTwist_32f_C3IR
ippiCopyReplicateBorder_16u_C1IR
ippiCopyReplicateBorder_16u_C3IR
ippiCopyReplicateBorder_32f_C1IR
ippiCopyReplicateBorder_32f_C3IR
ippiCopyReplicateBorder_8u_C1IR
ippiCopyReplicateBorder_8u_C3IR
ippiCrossCorrValid_Norm_32f_C1R
ippiDivC_32f_C1IR
ippiDivC_32f_C3IR
ippiDiv_32f_C1IR
ippiDiv_32f_C3IR
ippiExp_32f_C1IR
ippiExp_32f_C3IR
ippiFFTFree_R_32f
ippiMulC_16u_C1IRSfs
ippiMulC_16u_C3IRSfs
ippiMulC_32f_C1IR
ippiMulC_32f_C3IR
ippiMulC_8u_C1IRSfs
ippiMulC_8u_C3IRSfs
ippiOrC_8u_C1IR
ippiResizeSqrPixel_32f_C1R
ippiSqrDistanceValid_Norm_32f_C1R
ippiSqr_32f_C1IR
ippiSqr_32f_C3IR
ippiSubC_16u_C1IRSfs
ippiSubC_16u_C3IRSfs
ippiSubC_32f_C1IR
ippiSubC_32f_C3IR
ippiSubC_8u_C1IRSfs
ippiSubC_8u_C3IRSfs
ippiSub_32f_C1IR
ippiSub_32f_C3IR
ippsDivC_64f_I
ippsDiv_32f_I
ippsFFTFree_R_64f
ippsFFTInitAlloc_R_64f
ippsMul_32f_I
ippsNot_8u_I
ippiCopyWrapBorder_32f_C1IR
ippiCrossCorrValid_Norm_32f_C3R
ippiFilterBox_32f_C1IR
ippiMul_32f_C1IR
ippiThreshold_LT_32f_C1IR
ippiWTFwdFree_32f_C1R
ippiWTFwdFree_32f_C3R
ippiWTInvFree_32f_C1R
ippiWTInvFree_32f_C3R
----------------------------------------------

145||||1|1 Question. All inplace functions will be removed in the future. Is it possible to use ALL (!) of them as noninplace (pInput = pOutput). Is there any exception? I had some problems when changing from vers.5 to vers.6.

ippsHilbert_32f32fc
----------------------------------------------

146|||||DtpBim  

----------------------------------------------

147||||1|These calls are used as basic building blocks for tone generation and noise generation for dither for sound applications... there are no equivalent replacements.

ippsRandUniform_Direct_64f
ippsRandGauss_Direct_64f
ippsTone_Direct_64f
ippsTriangle_Direct_64f
ippsInterleave_16s
ippsSub_64f_I
ippsAdd_64f_I
----------------------------------------------

148||||| We need to use the ippiFFTFwd not the ippsFFTFwd because we are doing an FFT on image data. The ippiFFTFwd functions take an IppiFFTSpec_C_32fc so we can't use ippsFFTInit_R_32f because this takes an IppsFFTSpec_C_32fc.

----------------------------------------------

149||||1|

ippsTone_Direct_32fc
ippsTone_Direct_32f
----------------------------------------------

150||||1|We have based our code on the USC codecs in the sample code - it relies on these functions.  If the USC codecs are being updated then that will give us a path for migration.  I note that the USC codec samples are not being deprecated.

ippsMul_16s32s_Sfs
ippsGoertzTwo_32fc
ippsHilbertFree_32f32fc
ippsHilbertInitAlloc_32f32fc
ippsHilbert_32f32fc
ippsRandUniform_Direct_16s
ippsRandUniform_Direct_32f
----------------------------------------------

151||||1|

ippiResizeSqrPixel_32f_C1R
ippsAbs_32f_I
ippsAbs_64f_I
ippsAddC_32f_I
ippsAddC_32s_ISfs
ippsAddC_64f_I
ippsAdd_32f_I
ippsAdd_32fc_I
ippsAdd_32s_ISfs
ippsAdd_64f_I
ippsAdd_64fc_I
ippsAndC_16u_I
ippsAndC_32u_I
ippsConj_32fc_I
ippsConj_64fc_I
ippsDecodeHuffInitAlloc_8u
ippsDecodeHuff_8u
ippsDivCRev_32f_I
ippsDivC_32f_I
ippsDiv_32f_I
ippsDiv_64f_I
ippsEncodeHuffFinal_8u
ippsEncodeHuffInitAlloc_8u
ippsEncodeHuff_8u
ippsExp_32f_I
ippsFFTFree_C_32fc
ippsFFTFree_C_64fc
ippsFFTFree_R_32f
ippsFFTFree_R_64f
ippsFFTInitAlloc_C_32fc
ippsFFTInitAlloc_C_64fc
ippsFFTInitAlloc_R_32f
ippsFFTInitAlloc_R_64f
ippsFIRFree_32f
ippsFIRInitAlloc_32f
ippsFIRMRInitAlloc_32f
ippsFIRMRInitAlloc_32fc
ippsFIRSetTaps_32f
ippsFIR_32f_I
ippsFilterMedian_32f_I
ippsFlip_32f_I
ippsHuffFree_8u
ippsHuffGetLenCodeTable_8u
ippsHuffLenCodeTablePack_8u
ippsHuffLenCodeTableUnpack_8u
ippsIIRInitAlloc_32f
ippsIIR_32f_I
ippsLn_32f_I
ippsMaxEvery_32f_I
ippsMulC_32f_I
ippsMulC_32s_ISfs
ippsMulC_64f_I
ippsMulC_64fc_I
ippsMul_32f_I
ippsMul_32fc_I
ippsMul_64f_I
ippsMul_64fc_I
ippsOr_16u_I
ippsOr_32u_I
ippsRandGaussInitAlloc_32f
ippsRandGauss_Direct_32f
ippsRandUniform_Direct_32f
ippsSqr_32f_I
ippsSqrt_32f_I
ippsSubCRev_32f_I
ippsSubC_32f_I
ippsSubC_32fc_I
ippsSubC_64f_I
ippsSub_32f_I
ippsSub_32fc_I
ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippsThreshold_32f_I
ippsThreshold_GT_64fc_I
ippsThreshold_LTInv_32f_I
ippsThreshold_LTVal_32f_I
ippsThreshold_LT_32f_I
ippsThreshold_LT_64f_I
ippsTone_Direct_32f
ippsTone_Direct_32fc
ippsTriangle_Direct_64f
ippsVectorRamp_32f
ippsVectorRamp_32s
ippsWinHamming_32f_I
ippsWinKaiser_32f_I
----------------------------------------------

152||||1|

ippiAbs_32f_C1IR
ippiAbs_32f_C3IR
ippiAdd_16u_C1IRSfs
ippiAdd_16u_C3IRSfs
ippiAdd_32f_C1IR
ippiAdd_32f_C3IR
ippiAdd_8u_C1IRSfs
ippiAdd_8u_C3IRSfs
ippiAddC_16u_C1IRSfs
ippiAddC_16u_C3IRSfs
ippiAddC_32f_C1IR
ippiAddC_32f_C3IR
ippiAddC_8u_C1IRSfs
ippiAddC_8u_C3IRSfs
ippiAnd_16u_C1IR
ippiAnd_16u_C3IR
ippiAnd_8u_C1IR
ippiAnd_8u_C3IR
ippiAndC_16u_C1IR
ippiAndC_16u_C3IR
ippiAndC_8u_C1IR
ippiAndC_8u_C3IR
ippiCrossCorrFull_NormLevel_32f_C1R
ippiCrossCorrValid_Norm_16u32f_C1R
ippiCrossCorrValid_Norm_32f_C1R
ippiCrossCorrValid_Norm_8u32f_C1R
ippiDilate_16u_C1IR
ippiDilate_16u_C3IR
ippiDilate_32f_C1IR
ippiDilate_32f_C3IR
ippiDilate_8u_C1IR
ippiDilate_8u_C3IR
ippiDilate3x3_16u_C1IR
ippiDilate3x3_16u_C3IR
ippiDilate3x3_32f_C1IR
ippiDilate3x3_32f_C3IR
ippiDilate3x3_8u_C1IR
ippiDilate3x3_8u_C3IR
ippiDistanceTransform_3x3_8u_C1R
ippiDistanceTransform_3x3_8u16u_C1R
ippiDistanceTransform_5x5_8u_C1R
ippiDistanceTransform_5x5_8u16u_C1R
ippiDiv_16u_C1IRSfs
ippiDiv_16u_C3IRSfs
ippiDiv_32f_C1IR
ippiDiv_32f_C3IR
ippiDiv_8u_C1IRSfs
ippiDiv_8u_C3IRSfs
ippiDivC_16u_C1IRSfs
ippiDivC_16u_C3IRSfs
ippiDivC_32f_C1IR
ippiDivC_32f_C3IR
ippiDivC_8u_C1IRSfs
ippiDivC_8u_C3IRSfs
ippiErode_16u_C1IR
ippiErode_16u_C3IR
ippiErode_32f_C1IR
ippiErode_32f_C3IR
ippiErode_8u_C1IR
ippiErode_8u_C3IR
ippiErode3x3_16u_C1IR
ippiErode3x3_16u_C3IR
ippiErode3x3_32f_C1IR
ippiErode3x3_32f_C3IR
ippiErode3x3_8u_C1IR
ippiErode3x3_8u_C3IR
ippiExp_16u_C1IRSfs
ippiExp_16u_C3IRSfs
ippiExp_32f_C1IR
ippiExp_32f_C3IR
ippiExp_8u_C1IRSfs
ippiExp_8u_C3IRSfs
ippiLn_16u_C1IRSfs
ippiLn_16u_C3IRSfs
ippiLn_32f_C1IR
ippiLn_32f_C3IR
ippiLn_8u_C1IRSfs
ippiLn_8u_C3IRSfs
ippiLShiftC_16u_C1IR
ippiLShiftC_16u_C3IR
ippiLShiftC_8u_C1IR
ippiLShiftC_8u_C3IR
ippiMul_16u_C1IRSfs
ippiMul_16u_C3IRSfs
ippiMul_32f_C1IR
ippiMul_32f_C3IR
ippiMul_8u_C1IRSfs
ippiMul_8u_C3IRSfs
ippiMulC_16u_C1IRSfs
ippiMulC_16u_C3IRSfs
ippiMulC_32f_C1IR
ippiMulC_32f_C3IR
ippiMulC_8u_C1IRSfs
ippiMulC_8u_C3IRSfs
ippiNot_8u_C1IR
ippiNot_8u_C3IR
ippiOr_16u_C1IR
ippiOr_16u_C3IR
ippiOr_8u_C1IR
ippiOr_8u_C3IR
ippiOrC_16u_C1IR
ippiOrC_16u_C3IR
ippiOrC_8u_C1IR
ippiOrC_8u_C3IR
ippiPyramidLayerDownFree_16u_C1R
ippiPyramidLayerDownFree_16u_C3R
ippiPyramidLayerDownFree_8u_C1R
ippiPyramidLayerDownFree_8u_C3R
ippiPyramidLayerDownInitAlloc_16u_C1R
ippiPyramidLayerDownInitAlloc_16u_C3R
ippiPyramidLayerDownInitAlloc_8u_C1R
ippiPyramidLayerDownInitAlloc_8u_C3R
ippiPyrDown_Gauss5x5_32f_C1R
ippiPyrDown_Gauss5x5_32f_C3R
ippiPyrDown_Gauss5x5_8u_C1R
ippiPyrDown_Gauss5x5_8u_C3R
ippiPyrDownGetBufSize_Gauss5x5
ippiRShiftC_16u_C1IR
ippiRShiftC_16u_C3IR
ippiRShiftC_8u_C1IR
ippiRShiftC_8u_C3IR
ippiSqr_16u_C1IRSfs
ippiSqr_16u_C3IRSfs
ippiSqr_32f_C1IR
ippiSqr_32f_C3IR
ippiSqr_8u_C1IRSfs
ippiSqr_8u_C3IRSfs
ippiSqrDistanceValid_Norm_16u32f_C1R
ippiSqrDistanceValid_Norm_32f_C1R
ippiSqrDistanceValid_Norm_8u32f_C1R
ippiSqrt_16u_C1IRSfs
ippiSqrt_16u_C3IRSfs
ippiSqrt_32f_C1IR
ippiSqrt_32f_C3IR
ippiSqrt_8u_C1IRSfs
ippiSqrt_8u_C3IRSfs
ippiSub_16u_C1IRSfs
ippiSub_16u_C3IRSfs
ippiSub_32f_C1IR
ippiSub_32f_C3IR
ippiSub_8u_C1IRSfs
ippiSub_8u_C3IRSfs
ippiSubC_16u_C1IRSfs
ippiSubC_16u_C3IRSfs
ippiSubC_32f_C1IR
ippiSubC_32f_C3IR
ippiSubC_8u_C1IRSfs
ippiSubC_8u_C3IRSfs
ippiTranspose_16u_C1IR
ippiTranspose_16u_C3IR
ippiTranspose_32f_C1IR
ippiTranspose_32f_C3IR
ippiTranspose_8u_C1IR
ippiTranspose_8u_C3IR
ippiXor_16u_C1IR
ippiXor_16u_C3IR
ippiXor_8u_C1IR
ippiXor_8u_C3IR
ippiXorC_16u_C1IR
ippiXorC_16u_C3IR
ippiXorC_8u_C1IR
ippiXorC_8u_C3IR
ippiFFTFree_R_32f
ippiThreshold_GT_8u_C1IR
ippiThreshold_GT_16u_C1IR
ippiThreshold_GT_8u_C3IR
ippiThreshold_GT_16u_C3IR
----------------------------------------------

153||||1|We need these functions to resize different type of images coming from different camera systems in a sub-pixel level

ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_16u_C4R
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_32f_C3R
ippiResizeSqrPixel_32f_C4R
----------------------------------------------

154|||||YiQqYs  

----------------------------------------------

155||||1|

ippiAddRandUniform_Direct_8u_C1IR
ippiAddRandUniform_Direct_8u_C3IR
ippiAddRandUniform_Direct_8u_C4IR
ippiAddRandUniform_Direct_16s_C1IR
ippiAddRandUniform_Direct_16s_C3IR
ippiAddRandUniform_Direct_32f_C1IR
ippiAddRandUniform_Direct_32f_C3IR
----------------------------------------------

156|||||FmvAFK  

----------------------------------------------

157|||||

ippiResizeSqrPixel_8u_C4R
ippsAddC_8u_ISfs
ippiAlphaPremul_8u_AC4IR
----------------------------------------------

158|||||I'm a registered user: thanks.

ippiDeinterlaceBlendInitAlloc_8u_C1
ippiDeinterlaceBlendFree_8u_C1
ippiFilterDenoiseCAST_8u_C1R
ippiFilterDenoiseMosquito_8u_C1R
ippiFilterDenoiseMosquitoInitAlloc_8u_C1
ippiFilterDenoiseMosquitoFree_8u_C1
ippsAbs_32f_I
----------------------------------------------

159||||1|Followings would be highly appreciated/recommended:

ippsRijndael256DecryptCTR
ippsRijndael256DecryptCBC
ippsMul_16s32s_Sfs
ippsRandUniformInitAlloc_32f
ippsGetSize_BN
ippsGet_BN
ippsCmpZero_BN
ippsRijndael192GetSize
ippsRijndael192Init
ippsRijndael256GetSize
ippsRijndael256Init
ippsRijndael192EncryptECB
ippsRijndael256EncryptECB
ippsRijndael192EncryptCTR
ippsRijndael256EncryptCTR
ippsRijndael192DecryptECB
ippsRijndael256DecryptECB
ippsRijndael192DecryptCTR
ippsInterleave_16s
ippsVLCDecodeOne_1u16s
ippsVLCDecodeBlock_1u16s
ippsVLCDecodeUTupleBlock_1u16s
ippsVLCEncodeBlock_16s1u
ippsVLCEncodeGetSize_32s
ippsVLCEncodeInit_32s
ippsVLCCountBits_16s32s
ippsVLCCountEscBits_AAC_16s32s
ippsAdd_32f_I
ippsMul_32f_I
ippsNoiselessDecode_AAC
ippsFIRFree_32f
----------------------------------------------

160|||||

ippiResizeSqrPixel_8u_C1R
----------------------------------------------

161||||1|

ippsAdd_32fc_I
ippsAdd_32f_I
ippsAddC_32f_I
ippsConj_32fc_I
ippsDFTFree_C_32fc
ippsDiv_32f_I
ippsDivC_32f_I
ippsDivCRev_32f_I
ippsExp_32f_I
ippsFFTFree_C_32fc
ippsFFTFwd_CToC_32fc_I
ippsFFTInitAlloc_C_32fc
ippsFFTInv_CToC_32fc_I
ippsFIRFree_32fc
ippsFIRInitAlloc_32fc
ippsFIRSetTaps_32fc
ippsFlip_32f_I
ippsMul_32fc_I
ippsMul_32f_I
ippsMulC_32fc_I
ippsMulC_32f_I
ippsSqr_32f_I
ippsSub_32fc_I
ippsSubC_32f_I
ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippsThreshold_32f_I
ippsTone_Direct_32fc
ippsXor_8u_I
----------------------------------------------

162||||1|

ippsAdd_32fc_I
ippsAdd_32f_I
ippsAddC_32f_I
ippsConj_32fc_I
ippsDivC_32fc_I
ippsExp_32f_I
ippsFFTFree_C_32fc
ippsFFTFwd_CToC_32fc_I
ippsFFTInitAlloc_C_32fc
ippsFFTInv_CToC_32fc_I
ippsLn_32f_I
ippsMagSquared_32fc64f
ippsMinEvery_32f_I
ippsMul_32fc_I
ippsMul_32f_I
ippsMulC_32fc_I
ippsMulC_32f_I
ippsSubC_32f_I
ippsSwapBytes_16u_I
ippsThreshold_32f_I
ippsThreshold_GTVal_32f_I
ippsTone_Direct_32fc
ippsXor_8u_I
----------------------------------------------

163|||||

ippiMirror_8u_AC4IR
----------------------------------------------

164|||||I utilize the in-place functionality quite a bit in the MKL and IPP libraries. I understand getting rid of some of the functions that are getting replaced by newer version, but getting rid of in-place functionality without replacing it with a newer version just seems goofy.

ippsSubC_32f_I
ippsSubC_64f_I
ippsMulC_32f_I
ippsMulC_64f_I
ippsAddC_32f_I
ippsAddC_64f_I
ippsDivC_32f_I
ippsDivC_64f_I
----------------------------------------------

165||||1|In v7.1 there is no option to perform cubic interpolation for float images

ippiResizeSqrPixel_32f_C1R
----------------------------------------------

166|||||

----------------------------------------------

167|||||

ippiResizeYUV420GetBufSize
----------------------------------------------

168|||||

ippiComputeThreshold_Otsu_8u_C1R
----------------------------------------------

169||||1|

ippsTone_Direct_32fc
ippsMul_32fc_I
ippsFIR_32f_I
----------------------------------------------

170|||||

ippsAdd_32f_I
----------------------------------------------

171|||||

ippsGFMul_8u
ippsGFInit_8u
ippsConj_32fc_I
ippsAdd_32fc_I
ippsMul_32f32fc_I
ippsFIRSetTaps_32fc
----------------------------------------------

172|||||

ippsMul_32fc_I
----------------------------------------------

173||||1|

ippiMirror_8u_C4IR
ippiResizeSqrPixel_8u_C4R
ippiMirror_8u_C1IR
ippiResizeSqrPixel_8u_C1R
ippiDeinterlaceFilterCAVT_8u_C1R
----------------------------------------------

174|||||

ippiDeinterlaceFilterCAVT_8u_C1R
----------------------------------------------

175||||1|

ipprRemap_32f_C1PV
ipprRemap_16u_C1PV
ipprRemap_8u_C1PV
----------------------------------------------

176|||||

ippsWinHamming_32f_I
----------------------------------------------

177||||1|We are processing 3D medical images (CT/MRI) and generate ratiotherapy dose volumes, which are processed.

ipprResize_32f_C1V
ipprResize_16u_C1V
ipprWarpAffine_32f_C1PV
----------------------------------------------

178|||||

ippiRGBToYCbCr444LS_MCU_8u16s_C3P3R
ippiRGBToYCbCr411LS_MCU_8u16s_C3P3R
ippiBGRToYCbCr411LS_MCU_8u16s_C3P3R
ippiRGBToYCbCr422LS_MCU_8u16s_C3P3R
ippiBGRToYCbCr422LS_MCU_8u16s_C3P3R
ippiCMYKToYCCK444LS_MCU_8u16s_C4P4R
ippiCMYKToYCCK422LS_MCU_8u16s_C4P4R
ippiCMYKToYCCK411LS_MCU_8u16s_C4P4R
ippiSampleDown444LS_MCU_8u16s_C3P3R
ippiSampleDown411LS_MCU_8u16s_C3P3R
ippiSampleDown422LS_MCU_8u16s_C3P3R
ippiSplit422LS_MCU_8u16s_C2P3R
ippiZigzagInv8x8_16s_C1
ippiYCbCr444ToRGBLS_MCU_16s8u_P3C3R
ippiYCbCr444ToBGRLS_MCU_16s8u_P3C3R
ippiYCbCr422ToRGBLS_MCU_16s8u_P3C3R
ippiYCbCr422ToBGRLS_MCU_16s8u_P3C3R
ippiYCbCr411ToRGBLS_MCU_16s8u_P3C3R
ippiYCbCr411ToBGRLS_MCU_16s8u_P3C3R
ippiMirror_8u_C3IR
ippiYCCK444ToCMYKLS_MCU_16s8u_P4C4R
ippiMirror_8u_C1IR
ippiYCCK422ToCMYKLS_MCU_16s8u_P4C4R
ippiYCCK411ToCMYKLS_MCU_16s8u_P4C4R
ippiAdd128_JPEG_16s8u_C1R
ippiSampleUp444LS_MCU_16s8u_P3C3R
ippiSampleUp411LS_MCU_16s8u_P3C3R
ippiSampleUp422LS_MCU_16s8u_P3C3R
ippStaticInit
ippiDecodeHuffmanStateFree_JPEG_8u
ippiDecodeHuffmanStateInitAlloc_JPEG_8u
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_16u_C3R
ippiMirror_16u_C3IR
ippiResizeSqrPixel_16u_C1R
ippiMirror_16u_C1IR
----------------------------------------------

179||||1|Hi,

ippiZigzagInv8x8_16s_C1
ippiRGBToYCbCr444LS_MCU_8u16s_C3P3R
ippiRGBToYCbCr411LS_MCU_8u16s_C3P3R
ippiYCbCr444ToRGBLS_MCU_16s8u_P3C3R
ippiBGRToYCbCr411LS_MCU_8u16s_C3P3R
ippiRGBToYCbCr422LS_MCU_8u16s_C3P3R
ippiBGRToYCbCr422LS_MCU_8u16s_C3P3R
ippiCMYKToYCCK444LS_MCU_8u16s_C4P4R
ippiCMYKToYCCK422LS_MCU_8u16s_C4P4R
ippiCMYKToYCCK411LS_MCU_8u16s_C4P4R
ippiYCbCr444ToBGRLS_MCU_16s8u_P3C3R
ippiYCbCr422ToRGBLS_MCU_16s8u_P3C3R
ippiSampleDown444LS_MCU_8u16s_C3P3R
ippiSampleDown411LS_MCU_8u16s_C3P3R
ippiYCbCr422ToBGRLS_MCU_16s8u_P3C3R
ippiSampleDown422LS_MCU_8u16s_C3P3R
ippiYCbCr411ToRGBLS_MCU_16s8u_P3C3R
ippiSplit422LS_MCU_8u16s_C2P3R
ippiYCbCr411ToBGRLS_MCU_16s8u_P3C3R
ippiMirror_8u_C3IR
ippiYCCK444ToCMYKLS_MCU_16s8u_P4C4R
ippiMirror_8u_C1IR
ippiYCCK422ToCMYKLS_MCU_16s8u_P4C4R
ippiYCCK411ToCMYKLS_MCU_16s8u_P4C4R
ippiAdd128_JPEG_16s8u_C1R
ippiSampleUp444LS_MCU_16s8u_P3C3R
ippiSampleUp411LS_MCU_16s8u_P3C3R
ippiSampleUp422LS_MCU_16s8u_P3C3R
ippiDecodeHuffmanStateFree_JPEG_8u
ippiDecodeHuffmanStateInitAlloc_JPEG_8u
----------------------------------------------

180||||1|

ippsMul_16s32s_Sfs
----------------------------------------------

181||||1|

ippsFFTFree_C_32f
ippsFFTInitAlloc_C_32f
ippsFFTFwd_CToC_32f_I
ippsFFTInv_CToC_32f_I
ippsDFTFree_C_32f
ippsLn_32f_I
ippsMulC_32f_I
ippsTone_Direct_64fc
ippsTone_Direct_32fc
ippsFIRInitAlloc_32f
ippsFIRMRInitAlloc_32f
ippsFIRInitAlloc_32fc
ippsIIRFree_32f
ippsIIRFree_32fc
ippsFIRMRInitAlloc64f_32f
ippsFIRFree64f_32f
ippsFIRFree_32f
ippsFIRFree_32fc
----------------------------------------------

182|||||

ippsWinHamming_32f_I
----------------------------------------------

183||||1|

----------------------------------------------

184||||1|Please do not remove the in-place functions.  I would much rather have a larger library than lose important functionality like this.

ippiAbs_32f_C1IR
ippiAbs_32f_C3IR
ippiAbs_32f_C4IR
ippiAdd_16u_AC4IRSfs
ippiAdd_16u_AC4RSfs
ippiAdd_16u_C1IRSfs
ippiAdd_16u_C3IRSfs
ippiAdd_16u_C4IRSfs
ippiAdd_32f_AC4IR
ippiAdd_32f_AC4R
ippiAdd_32f_C1IR
ippiAdd_32f_C3IR
ippiAdd_32f_C4IR
ippiAdd_8u_AC4IRSfs
ippiAdd_8u_AC4RSfs
ippiAdd_8u_C1IRSfs
ippiAdd_8u_C3IRSfs
ippiAdd_8u_C4IRSfs
ippiAddC_16s_C1IRSfs
ippiAddC_16u_AC4IRSfs
ippiAddC_16u_C1IRSfs
ippiAddC_16u_C3IRSfs
ippiAddC_16u_C4IRSfs
ippiAddC_32f_AC4IR
ippiAddC_32f_C1IR
ippiAddC_32f_C3IR
ippiAddC_32f_C4IR
ippiAddC_8u_AC4IRSfs
ippiAddC_8u_C1IRSfs
ippiAddC_8u_C3IRSfs
ippiAddC_8u_C4IRSfs
ippiAddRandGauss_Direct_8u_C3IR
ippiAddRandUniform_Direct_16u_AC4IR
ippiAddRandUniform_Direct_16u_C1IR
ippiAddRandUniform_Direct_16u_C3IR
ippiAddRandUniform_Direct_16u_C4IR
ippiAddRandUniform_Direct_32f_AC4IR
ippiAddRandUniform_Direct_32f_C1IR
ippiAddRandUniform_Direct_32f_C3IR
ippiAddRandUniform_Direct_32f_C4IR
ippiAddRandUniform_Direct_8u_AC4IR
ippiAddRandUniform_Direct_8u_C1IR
ippiAddRandUniform_Direct_8u_C3IR
ippiAddRandUniform_Direct_8u_C4IR
ippiAnd_8u_C1IR
ippiCrossCorrFull_NormLevel_16u32f_AC4R
ippiCrossCorrFull_NormLevel_16u32f_C1R
ippiCrossCorrFull_NormLevel_16u32f_C3R
ippiCrossCorrFull_NormLevel_16u32f_C4R
ippiCrossCorrFull_NormLevel_32f_AC4R
ippiCrossCorrFull_NormLevel_32f_C1R
ippiCrossCorrFull_NormLevel_32f_C3R
ippiCrossCorrFull_NormLevel_32f_C4R
ippiCrossCorrFull_NormLevel_8u32f_AC4R
ippiCrossCorrFull_NormLevel_8u32f_C1R
ippiCrossCorrFull_NormLevel_8u32f_C3R
ippiCrossCorrFull_NormLevel_8u32f_C4R
ippiCrossCorrSame_NormLevel_16u32f_AC4R
ippiCrossCorrSame_NormLevel_16u32f_C1R
ippiCrossCorrSame_NormLevel_16u32f_C3R
ippiCrossCorrSame_NormLevel_16u32f_C4R
ippiCrossCorrSame_NormLevel_32f_AC4R
ippiCrossCorrSame_NormLevel_32f_C1R
ippiCrossCorrSame_NormLevel_32f_C3R
ippiCrossCorrSame_NormLevel_32f_C4R
ippiCrossCorrSame_NormLevel_8u32f_AC4R
ippiCrossCorrSame_NormLevel_8u32f_C1R
ippiCrossCorrSame_NormLevel_8u32f_C3R
ippiCrossCorrSame_NormLevel_8u32f_C4R
ippiCrossCorrValid_NormLevel_16u32f_AC4R
ippiCrossCorrValid_NormLevel_16u32f_C1R
ippiCrossCorrValid_NormLevel_16u32f_C3R
ippiCrossCorrValid_NormLevel_16u32f_C4R
ippiCrossCorrValid_NormLevel_32f_AC4R
ippiCrossCorrValid_NormLevel_32f_C1R
ippiCrossCorrValid_NormLevel_32f_C3R
ippiCrossCorrValid_NormLevel_32f_C4R
ippiCrossCorrValid_NormLevel_8u32f_AC4R
ippiCrossCorrValid_NormLevel_8u32f_C1R
ippiCrossCorrValid_NormLevel_8u32f_C3R
ippiCrossCorrValid_NormLevel_8u32f_C4R
ippiDilate3x3_16u_AC4IR
ippiDilate3x3_16u_C1IR
ippiDilate3x3_16u_C3IR
ippiDilate3x3_16u_C4IR
ippiDilate3x3_32f_AC4IR
ippiDilate3x3_32f_C1IR
ippiDilate3x3_32f_C3IR
ippiDilate3x3_32f_C4IR
ippiDilate3x3_8u_AC4IR
ippiDilate3x3_8u_C1IR
ippiDilate3x3_8u_C3IR
ippiDilate3x3_8u_C4IR
ippiDiv_16u_AC4IRSfs
ippiDiv_16u_C1IRSfs
ippiDiv_16u_C3IRSfs
ippiDiv_16u_C4IRSfs
ippiDiv_32f_AC4IR
ippiDiv_32f_C1IR
ippiDiv_32f_C3IR
ippiDiv_32f_C4IR
ippiDiv_8u_AC4IRSfs
ippiDiv_8u_C1IRSfs
ippiDiv_8u_C3IRSfs
ippiDiv_8u_C4IRSfs
ippiDivC_16u_AC4IRSfs
ippiDivC_16u_C1IRSfs
ippiDivC_16u_C3IRSfs
ippiDivC_16u_C4IRSfs
ippiDivC_32f_AC4IR
ippiDivC_32f_C1IR
ippiDivC_32f_C3IR
ippiDivC_32f_C4IR
ippiDivC_8u_AC4IRSfs
ippiDivC_8u_C1IRSfs
ippiDivC_8u_C3IRSfs
ippiDivC_8u_C4IRSfs
ippiErode3x3_16u_AC4IR
ippiErode3x3_16u_C1IR
ippiErode3x3_16u_C3IR
ippiErode3x3_16u_C4IR
ippiErode3x3_32f_AC4IR
ippiErode3x3_32f_C1IR
ippiErode3x3_32f_C3IR
ippiErode3x3_32f_C4IR
ippiErode3x3_8u_AC4IR
ippiErode3x3_8u_C1IR
ippiErode3x3_8u_C3IR
ippiErode3x3_8u_C4IR
ippiFFTFree_R_32f
ippiFilterBox_8u_C1IR
ippiFilterBox_8u_C3IR
ippiLUT_16u_C1IR
ippiLUT_16u_C3IR
ippiLUT_16u_C4IR
ippiLUT_32f_AC4IR
ippiLUT_32f_C1IR
ippiLUT_32f_C3IR
ippiLUT_32f_C4IR
ippiLUT_8u_C1IR
ippiLUT_8u_C3IR
ippiLUT_8u_C4IR
ippiLUT_Cubic_16u_C1IR
ippiLUT_Cubic_16u_C3IR
ippiLUT_Cubic_16u_C4IR
ippiLUT_Cubic_32f_AC4IR
ippiLUT_Cubic_32f_C1IR
ippiLUT_Cubic_32f_C3IR
ippiLUT_Cubic_32f_C4IR
ippiLUT_Cubic_8u_C1IR
ippiLUT_Cubic_8u_C3IR
ippiLUT_Cubic_8u_C4IR
ippiLUT_Linear_16u_C1IR
ippiLUT_Linear_16u_C3IR
ippiLUT_Linear_16u_C4IR
ippiLUT_Linear_32f_AC4IR
ippiLUT_Linear_32f_C1IR
ippiLUT_Linear_32f_C3IR
ippiLUT_Linear_32f_C4IR
ippiLUT_Linear_8u_C1IR
ippiLUT_Linear_8u_C3IR
ippiLUT_Linear_8u_C4IR
ippiMirror_16u_C1IR
ippiMirror_16u_C3IR
ippiMirror_16u_C4IR
ippiMirror_32s_C1IR
ippiMirror_32s_C3IR
ippiMirror_32s_C4IR
ippiMirror_8u_C1IR
ippiMirror_8u_C3IR
ippiMirror_8u_C4IR
ippiMul_16u_AC4IRSfs
ippiMul_16u_C1IRSfs
ippiMul_16u_C3IRSfs
ippiMul_16u_C4IRSfs
ippiMul_32f_AC4IR
ippiMul_32f_C1IR
ippiMul_32f_C3IR
ippiMul_32f_C4IR
ippiMul_8u_AC4IRSfs
ippiMul_8u_C1IRSfs
ippiMul_8u_C3IRSfs
ippiMul_8u_C4IRSfs
ippiMulC_16s_C1IRSfs
ippiMulC_16u_AC4IRSfs
ippiMulC_16u_C1IRSfs
ippiMulC_16u_C3IRSfs
ippiMulC_16u_C4IRSfs
ippiMulC_32f_AC4IR
ippiMulC_32f_C1IR
ippiMulC_32f_C3IR
ippiMulC_32f_C4IR
ippiMulC_8u_AC4IRSfs
ippiMulC_8u_C1IRSfs
ippiMulC_8u_C3IRSfs
ippiMulC_8u_C4IRSfs
ippiNorm_L2_16u_AC4R
ippiNorm_L2_32f_AC4R
ippiNorm_L2_8u_AC4R
ippiNot_8u_C1IR
ippiOpticalFlowPyrLKFree_8u_C1R
ippiOpticalFlowPyrLKInitAlloc_8u_C1R
ippiOr_8u_C1IR
ippiPyramidFree
ippiPyramidInitAlloc
ippiPyramidLayerDownFree_8u_C1R
ippiPyramidLayerDownInitAlloc_8u_C1R
ippiResizeSqrPixel_16u_AC4R
ippiResizeSqrPixel_16u_C1R
ippiResizeSqrPixel_16u_C3R
ippiResizeSqrPixel_16u_C4R
ippiResizeSqrPixel_16u_P3R
ippiResizeSqrPixel_16u_P4R
ippiResizeSqrPixel_32f_AC4R
ippiResizeSqrPixel_32f_C1R
ippiResizeSqrPixel_32f_C3R
ippiResizeSqrPixel_32f_C4R
ippiResizeSqrPixel_32f_P3R
ippiResizeSqrPixel_32f_P4R
ippiResizeSqrPixel_8u_AC4R
ippiResizeSqrPixel_8u_C1R
ippiResizeSqrPixel_8u_C3R
ippiResizeSqrPixel_8u_C4R
ippiResizeSqrPixel_8u_P3R
ippiResizeSqrPixel_8u_P4R
ippiSqrt_16u_AC4IRSfs
ippiSqrt_16u_C1IRSfs
ippiSqrt_16u_C3IRSfs
ippiSqrt_32f_AC4IR
ippiSqrt_32f_C1IR
ippiSqrt_32f_C3IR
ippiSqrt_32f_C4IR
ippiSqrt_8u_AC4IRSfs
ippiSqrt_8u_C1IRSfs
ippiSqrt_8u_C3IRSfs
ippiSub_16u_AC4IRSfs
ippiSub_16u_C1IRSfs
ippiSub_16u_C3IRSfs
ippiSub_16u_C4IRSfs
ippiSub_32f_AC4IR
ippiSub_32f_C1IR
ippiSub_32f_C3IR
ippiSub_32f_C4IR
ippiSub_8u_AC4IRSfs
ippiSub_8u_C1IRSfs
ippiSub_8u_C3IRSfs
ippiSub_8u_C4IRSfs
ippiSubC_16u_AC4IRSfs
ippiSubC_16u_C1IRSfs
ippiSubC_16u_C3IRSfs
ippiSubC_16u_C4IRSfs
ippiSubC_32f_AC4IR
ippiSubC_32f_C1IR
ippiSubC_32f_C3IR
ippiSubC_32f_C4IR
ippiSubC_8u_AC4IRSfs
ippiSubC_8u_C1IRSfs
ippiSubC_8u_C3IRSfs
ippiSubC_8u_C4IRSfs
ippiThreshold_LT_16s_C1IR
ippiThreshold_LT_16s_C3IR
ippiThreshold_Val_16u_AC4IR
ippiThreshold_Val_16u_C1IR
ippiThreshold_Val_16u_C3IR
ippiThreshold_Val_32f_AC4IR
ippiThreshold_Val_32f_C1IR
ippiThreshold_Val_32f_C3IR
ippiThreshold_Val_8u_AC4IR
ippiThreshold_Val_8u_C1IR
ippiThreshold_Val_8u_C3IR
ippiXor_8u_C1IR
ippsAbs_32f_I
ippsAdd_16s_I
ippsAdd_16u
ippsAdd_32f_I
ippsAdd_64f_I
ippsAddC_32f_I
ippsAddC_64f_I
ippsDiv_32f_I
ippsDivC_32f_I
ippsDivC_64f_I
ippsExp_32f_I
ippsFFTFree_R_32f
ippsFFTFwd_RToPack_32f_I
ippsFFTInitAlloc_R_32f
ippsFFTInv_PackToR_32f_I
ippsFilterMedian_32f_I
ippsMul_32f_I
ippsMul_64f_I
ippsMulC_16s_ISfs
ippsMulC_32f_I
ippsMulC_64f_I
ippsRandUniform_Direct_32f
ippsSqrt_32f_I
ippsSub_32f_I
ippsSubC_32f_I
ippsSubCRev_32f_I
ippStaticInit
ippsThreshold_GT_64f_I
ippsThreshold_LT_64f_I
----------------------------------------------

185|||||

ippsDemodulateFM_CToR_16s
----------------------------------------------

186||||1|I would highly appreciate if you would stick to the Otsu-function in next releases.

ippiComputeThreshold_Otsu_8u_C1R
ippiResizeSqrPixel_8u_C1R
----------------------------------------------

187|||||

ippsTone_Direct_32fc
----------------------------------------------

188||||1|

ippsHuffGetSize_8u
ippsEncodeHuffInitAlloc_8u
ippsHuffGetLenCodeTable_8u
ippsHuffLenCodeTablePack_8u
ippsEncodeHuff_8u
ippsEncodeHuffFinal_8u
ippsHuffLenCodeTableUnpack_8u
ippsDecodeHuffInitAlloc_8u
ippsDecodeHuff_8u
ippsEncodeRLE_8u
ippsDecodeRLE_8u
----------------------------------------------

189||||1|

ippsSubC_64f_I
ippsAddC_32f_I
ippsSub_32f_I
ippsSqr_32f_I
ippsAdd_32f_I
ippsMulC_32f_I
ippsDivC_32f_I
ippsSqrt_32f_I
ippsThreshold_LTVal_32f_I
ippsDiv_32f_I
ippsSubC_32f_I
ippsAbs_32f_I
ippsMul_32f_I
ippsVectorRamp_32f
----------------------------------------------

190||||1|Deprecating inplace functions is not a problem if the not in place functions are able to access source and destination pointer to be equal. 

ippsRandUniform_Direct_64f
ippsRandGauss_Direct_64f
ippsTone_Direct_64f
ippsTone_Direct_64fc
ippsTriangle_Direct_64f
ippsTriangle_Direct_64fc
ippsVectorRamp_32s
ippsVectorRamp_64f
ippsConj_64fc_I
ippsThreshold_64f_I
ippsThreshold_64fc_I
ippsThreshold_LT_64f_I
ippsThreshold_LT_64fc_I
ippsThreshold_LT_16s_I
ippsThreshold_LT_32s_I
ippsThreshold_GT_64f_I
ippsThreshold_GT_64fc_I
ippsThreshold_GT_16s_I
ippsThreshold_LTAbs_64f_I
ippsThreshold_LTAbs_32s_I
ippsThreshold_GTAbs_64f_I
ippsThreshold_GTAbs_32s_I
ippsThreshold_LTVal_64f_I
ippsThreshold_LTVal_64fc_I
ippsThreshold_GTVal_64f_I
ippsThreshold_GTVal_64fc_I
ippsThreshold_LTInv_64f_I
ippsThreshold_LTInv_64fc_I
ippsThreshold_LTValGTVal_64f_I
ippsThreshold_GT_32s_I
ippsThreshold_LTValGTVal_32s_I
ippsFlip_8u_I
ippsFlip_16u_I
ippsFlip_32f_I
ippsFlip_64f_I
ippsFlip_64fc_I
ippsSwapBytes_16u_I
ippsSwapBytes_24u_I
ippsSwapBytes_32u_I
ippsSwapBytes_64u_I
ippsAddC_64f_I
ippsAddC_64fc_I
ippsSubC_64f_I
ippsSubC_64fc_I
ippsSubCRev_64f_I
ippsSubCRev_64fc_I
ippsMulC_64f_I
ippsMulC_64fc_I
ippsAddC_8u_ISfs
ippsSubC_8u_ISfs
ippsSubCRev_8u_ISfs
ippsMulC_8u_ISfs
ippsAddC_16s_ISfs
ippsSubC_16s_ISfs
ippsMulC_16s_ISfs
ippsSubCRev_16s_ISfs
ippsAddC_32s_ISfs
ippsAddC_32sc_ISfs
ippsSubC_32s_ISfs
ippsSubC_32sc_ISfs
ippsSubCRev_32s_ISfs
ippsSubCRev_32sc_ISfs
ippsMulC_32s_ISfs
ippsMulC_32sc_ISfs
ippsAdd_64f_I
ippsAdd_64fc_I
ippsSub_64f_I
ippsSub_64fc_I
ippsMul_64f_I
ippsMul_64fc_I
ippsAdd_8u_ISfs
ippsSub_8u_ISfs
ippsMul_8u_ISfs
ippsAdd_16s_ISfs
ippsSub_16s_ISfs
ippsMul_16s_ISfs
ippsAdd_32s_ISfs
ippsAdd_32sc_ISfs
ippsSub_32s_ISfs
ippsSub_32sc_ISfs
ippsMul_32s_ISfs
ippsMul_32sc_ISfs
ippsMul_32s32sc_ISfs
ippsMul_32s32sc_Sfs
ippsMul_Low_32s_Sfs
ippsSqr_64f_I
ippsSqr_64fc_I
ippsDiv_64f_I
ippsDiv_64fc_I
ippsDiv_16s_ISfs
ippsDiv_8u_ISfs
ippsDiv_32s_ISfs
ippsDivC_64f_I
ippsDivC_64fc_I
ippsDivC_16s_ISfs
ippsDivC_8u_ISfs
ippsSqrt_64f_I
ippsSqrt_64fc_I
ippsAbs_64f_I
ippsAbs_16s_I
ippsAbs_32s_I
ippsMagSquared_32sc32s_Sfs
ippsAndC_8u_I
ippsAndC_16u_I
ippsAndC_32u_I
ippsAnd_8u_I
ippsAnd_16u_I
ippsAnd_32u_I
ippsOrC_8u_I
ippsOrC_16u_I
ippsOrC_32u_I
ippsOr_8u_I
ippsOr_16u_I
ippsOr_32u_I
ippsXorC_8u_I
ippsXorC_16u_I
ippsXorC_32u_I
ippsXor_8u_I
ippsXor_16u_I
ippsXor_32u_I
ippsNot_8u_I
ippsNot_16u_I
ippsNot_32u_I
ippsLShiftC_8u_I
ippsLShiftC_16s_I
ippsLShiftC_32s_I
ippsRShiftC_8u_I
ippsRShiftC_16s_I
ippsRShiftC_32s_I
ippsDotProd_32sc_Sfs
ippsDotProd_32s32sc_Sfs
ippsGoertzTwo_64fc
ippsGoertzTwo_64f
ippsDCTFwdFree_64f
ippsDCTInvFree_64f
ippsDCTFwd_64f_I
ippsDCTInv_64f_I
ippsIIRInitAlloc_BiQuad_64f
ippsIIRInitAlloc_BiQuad_64fc
ippsIIRInitAlloc_64f
ippsIIRInitAlloc_64fc
ippsIIRFree_64f
ippsIIRFree_64fc
ippsIIROne_64f
ippsIIROne_64fc
ippsIIR_64f_I
ippsIIR_64fc_I
ippsFIRInitAlloc_64f
ippsFIRMRInitAlloc_64f
ippsFIRInitAlloc_64fc
ippsFIRMRInitAlloc_64fc
ippsFIRFree_64f
ippsFIRFree_64fc
ippsFIROne_64f
ippsFIROne_64fc
ippsFIR_64f_I
ippsFIR_64fc_I
ippsWinBartlett_64f_I
ippsWinBartlett_64fc_I
ippsWinHann_64f_I
ippsWinHann_64fc_I
ippsWinHamming_64f_I
ippsWinHamming_64fc_I
ippsWinBlackman_64f_I
ippsWinBlackman_64fc_I
ippsWinBlackmanStd_64f_I
ippsWinBlackmanStd_64fc_I
ippsWinBlackmanOpt_64f_I
ippsWinBlackmanOpt_64fc_I
ippsWinKaiser_64f_I
ippsWinKaiser_64fc_I
ippsFilterMedian_64f_I
ippsFilterMedian_16s_I
ippsFilterMedian_8u_I
ippsFilterMedian_32s_I
ippStaticInit
----------------------------------------------

191||||1|I'm sure some of the in-place functions can be replaced with the non-in-place functions using the Src/Dest as the 2nd address.  However, none of the documentation specifically says this.

ippsFFTInitAlloc_C_32fc
ippsAdd_16s_ISfs
ippsAdd_32f_I
ippsAdd_32u
ippsSub_16s_ISfs
ippsSwapBytes_16u_I
ippsSub_32s_ISfs
ippsMulC_32f_I
ippsThreshold_LT_16s_I
ippsMul_32f_I
ippsExp_32f_I
ippsAdd_16s_I
ippsSub_16s_I
ippsFFTFree_C_32fc
ippsLn_32f_I
ippiMulPack_32f_C1IR
ippiMirror_16u_C1IR
ippsSub_32f_I
ippsSub_16s32f
ippiThreshold_LTValGTVal_32f_C1IR
ippiMulC_32f_C1IR
ippiAddC_32f_C1IR
ippiAnd_32s_C1IR
ippiThreshold_LTValGTVal_16s_C1IR
ippiResizeSqrPixel_32f_C1R
ippsFFTInitAlloc_C_32f
ippsDivC_32f_I
ippsThreshold_LTVal_16s_I
ippiXorC_8u_C1IR
ippiMirror_8u_C1IR
----------------------------------------------

192|||||

ippsVectorRamp_16s
ippsSubC_16s_I
ippsVectorRamp_32f
ippsVectorRamp_32s
ippiSubC_16s_C1IRSfs
ippiThreshold_GT_16s_C1IR
ippiThreshold_LT_16s_C1IR
----------------------------------------------

193|||||

ippiTranspose_32f_C1IR
ippiTranspose_16u_C1IR
ippsMulC_64f_I
ippsMulC_32f_I
ippsAdd_32f_I
----------------------------------------------

194|||||

ippsRSDecodeBM_8u
ippsRSDecodeBMGetBufferSize_8u
ippsRSDecodeGetSize_8u
ippsRSDecodeInit_8u
ippsRSDecodeEEGetBufferSize_8u
ippsRSDecodeEE_8u
----------------------------------------------

195|||||

ippiComputeThreshold_Otsu_8u_C1R
----------------------------------------------

196|||||

ippsMul_16s32f
----------------------------------------------

197|||||

ippsMul_16s32f
----------------------------------------------

198|||||

ippsMul_16s32f
ippsMul_16s32s_Sfs
----------------------------------------------

199|||||

----------------------------------------------

200|||||

ippsVLCEncodeBlock_16s1u
ippsNoiselessDecode_AAC
ippsAdd_32f_I
ippsMul_32f_I
ippsVLCEncodeGetSize_32s
ippsVLCEncodeInit_32s
ippsVLCCountBits_16s32s
ippsVLCCountEscBits_AAC_16s32s
ippsMulC_32f_I
ippsJoin_32f16s_D2L
ippsVLCDecodeOne_1u16s
ippsVLCDecodeBlock_1u16s
ippsVLCDecodeUTupleBlock_1u16s
ippsRShiftC_32s_I
ippsLShiftC_32s_I
ippsSub_32f_I
ippsVLCDecodeGetSize_32s
ippsVLCDecodeInit_32s
ippsFIRFree_32f
ippiFilter8x8_H261_8u_C1R
ippiReconstructCoeffsIntra_H261_1u16s
ippiReconstructCoeffsInter_H261_1u16s
----------------------------------------------

201|||||

ippiLUT_8u_C1IR
ippiLUT_Linear_8u_C1IR
----------------------------------------------

202|||||

----------------------------------------------

203|||||ipprwarpAffine_32f , this function is really usefull to us, because we handle only monochrome medical and then we apply a color LUT. There is no efficient alternative.

ippiNot_8u_C1IR
ippiOrC_32s_C1IR
ippiResizeSqrPixel_8u_C4R
ippiThreshold_GTVal_16u_C1IR
ippiThreshold_LTVal_16u_C1IR
ipprWarpAffine_32f_C1PV
ipprWarpAffineGetBufSize
ippsAnd_8u_I
ippsDecodeGIT_8u
ippsDecodeGITGetSize_8u
ippsDecodeGITInit_8u
ippsEncodeGIT_8u
ippsEncodeGITGetSize_8u
ippsEncodeGITInit_8u
ippsFFTFree_C_64fc
ippsFFTInitAlloc_C_64fc
ippsNot_8u_I
ippsSumLn_32f
ippsSumLn_64f
ippsSwapBytes_16u_I
ippsSwapBytes_32u_I
ippsSwapBytes_64u_I
----------------------------------------------

204|||||

ippsFIR_Direct_32f
ippsMulPack_32f_I
ippsFFTInitAlloc_R_32f
----------------------------------------------

205|||||Need to maintain compatibility with legacy codec (DV, etc.)

ippiZigzagInv8x8_16s_C1
ippiAndC_16u_C1IR
ippsVLCEncodeGetSize_32s
ippsVLCEncodeInit_32s
ippsMul_32f_I
ippsAdd_32f_I
----------------------------------------------

206|||||

----------------------------------------------

207||||1|

ippsSub_16s_ISfs
ippsSqr_16s_ISfs
----------------------------------------------

208||||1|Is there another function that performs a similar task? I use this function often, and I'd like not to have to implement it myself if I don't have to.

ippiComputeThreshold_Otsu_8u_C1R
----------------------------------------------

209||||1|

ippsThreshold_LT_32f_I
ippsDiv_32f_I
ippsMulC_32f_I
ippsAddC_32f_I
ippsVectorRamp_32f
ippsLn_32f_I
ippsThreshold_32f_I
ippsAdd_32f_I
ippsThreshold_16s_I
ippsMul_32f_I
ippsSqr_32f_I
ippsSqrt_32f_I
ippsAbs_32f_I
ippsTone_Direct_32f
ippsFFTFwd_RToCCS_32f_I
ippsFFTInv_CCSToR_32f_I
----------------------------------------------

210||||1|Most out-of-place functions do not document whether they are safe to use in place or not.   This makes knowing which _I functions we can easily replace difficult to manage.

ippsAdd_32fc_I
ippsAdd_32f_I
ippsAddC_32f_I
ippsConj_32fc_I
ippsDFTFree_C_32fc
ippsDivCRev_32f_I
ippsExp_32f_I
ippsFFTFree_C_32fc
ippsFFTFwd_CToC_32fc_I
ippsFFTInitAlloc_C_32fc
ippsFFTInv_CToC_32fc_I
ippsFlip_32f_I
ippsMul_32fc_I
ippsMulC_32fc_I
ippsMulC_32f_I
ippsSub_32fc_I
ippsSubC_32f_I
ippsTone_Direct_32fc
ippsXor_8u_I
----------------------------------------------

211||||1|

ippsAdd_16s_I
ippsTone_Direct_16s
ippsMulC_16s_ISfs
ippsGoertzTwo_32fc
----------------------------------------------

212||||1|

ippsLowercase_16u
ippsUppercase_16u
--------------------------------------------